// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimesheetApp.Data;

#nullable disable

namespace TimesheetApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e28528ed-5d63-4f7c-aa42-c87f08474840",
                            Name = "HR",
                            NormalizedName = "HR"
                        },
                        new
                        {
                            Id = "252933e4-833f-466d-9745-7a99a2b5ba06",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0757586d-3ec0-4360-8b28-11bd64961437",
                            Name = "Supervisor",
                            NormalizedName = "SUPERVISOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TimesheetApp.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<double>("FlexTime")
                        .HasColumnType("double");

                    b.Property<bool>("HasTempPassword")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LabourGradeCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("PrivateKey")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PublicKey")
                        .HasColumnType("longblob");

                    b.Property<double>("Salary")
                        .HasColumnType("double");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<double>("SickDays")
                        .HasColumnType("double");

                    b.Property<string>("SupervisorId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TimesheetApproverId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumber")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TimesheetApproverId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.Budget", b =>
                {
                    b.Property<int>("BudgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Days")
                        .HasColumnType("double");

                    b.Property<string>("LabourCode")
                        .HasColumnType("longtext");

                    b.Property<int>("People")
                        .HasColumnType("int");

                    b.Property<double>("UnallocatedDays")
                        .HasColumnType("double");

                    b.Property<double>("UnallocatedPeople")
                        .HasColumnType("double");

                    b.Property<string>("WPProjectId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("isREBudget")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BudgetId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.EmployeeProject", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeProjects");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.EmployeeWorkPackage", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("WorkPackageId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("WorkPackageProjectId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "WorkPackageId", "WorkPackageProjectId");

                    b.HasIndex("WorkPackageId", "WorkPackageProjectId");

                    b.ToTable("EmployeeWorkPackages");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.LabourGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LabourCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<double>("Rate")
                        .HasColumnType("double");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LabourGrades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LabourCode = "DS",
                            Rate = 232.24000000000001,
                            Year = 2023
                        },
                        new
                        {
                            Id = 2,
                            LabourCode = "SS",
                            Rate = 256.19,
                            Year = 2023
                        },
                        new
                        {
                            Id = 3,
                            LabourCode = "P1",
                            Rate = 275.33999999999997,
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            LabourCode = "P2",
                            Rate = 351.94999999999999,
                            Year = 2023
                        },
                        new
                        {
                            Id = 5,
                            LabourCode = "P3",
                            Rate = 428.56999999999999,
                            Year = 2023
                        },
                        new
                        {
                            Id = 6,
                            LabourCode = "P4",
                            Rate = 538.70000000000005,
                            Year = 2023
                        },
                        new
                        {
                            Id = 7,
                            LabourCode = "P5",
                            Rate = 636.86000000000001,
                            Year = 2023
                        },
                        new
                        {
                            Id = 9,
                            LabourCode = "DS",
                            Rate = 241.06999999999999,
                            Year = 2024
                        },
                        new
                        {
                            Id = 10,
                            LabourCode = "SS",
                            Rate = 265.92000000000002,
                            Year = 2024
                        },
                        new
                        {
                            Id = 11,
                            LabourCode = "P1",
                            Rate = 285.80000000000001,
                            Year = 2024
                        },
                        new
                        {
                            Id = 12,
                            LabourCode = "P2",
                            Rate = 365.32999999999998,
                            Year = 2024
                        },
                        new
                        {
                            Id = 13,
                            LabourCode = "P3",
                            Rate = 444.86000000000001,
                            Year = 2024
                        },
                        new
                        {
                            Id = 14,
                            LabourCode = "P4",
                            Rate = 559.16999999999996,
                            Year = 2024
                        },
                        new
                        {
                            Id = 15,
                            LabourCode = "P5",
                            Rate = 661.07000000000005,
                            Year = 2024
                        },
                        new
                        {
                            Id = 17,
                            LabourCode = "DS",
                            Rate = 250.22999999999999,
                            Year = 2025
                        },
                        new
                        {
                            Id = 18,
                            LabourCode = "SS",
                            Rate = 276.02999999999997,
                            Year = 2025
                        },
                        new
                        {
                            Id = 19,
                            LabourCode = "P1",
                            Rate = 296.66000000000003,
                            Year = 2025
                        },
                        new
                        {
                            Id = 20,
                            LabourCode = "P2",
                            Rate = 379.20999999999998,
                            Year = 2025
                        },
                        new
                        {
                            Id = 21,
                            LabourCode = "P3",
                            Rate = 461.75999999999999,
                            Year = 2025
                        },
                        new
                        {
                            Id = 22,
                            LabourCode = "P4",
                            Rate = 580.41999999999996,
                            Year = 2025
                        },
                        new
                        {
                            Id = 23,
                            LabourCode = "P5",
                            Rate = 686.19000000000005,
                            Year = 2025
                        },
                        new
                        {
                            Id = 25,
                            LabourCode = "DS",
                            Rate = 259.74000000000001,
                            Year = 2026
                        },
                        new
                        {
                            Id = 26,
                            LabourCode = "SS",
                            Rate = 286.51999999999998,
                            Year = 2026
                        },
                        new
                        {
                            Id = 27,
                            LabourCode = "P1",
                            Rate = 307.94,
                            Year = 2026
                        },
                        new
                        {
                            Id = 28,
                            LabourCode = "P2",
                            Rate = 393.62,
                            Year = 2026
                        },
                        new
                        {
                            Id = 29,
                            LabourCode = "P3",
                            Rate = 479.31,
                            Year = 2026
                        },
                        new
                        {
                            Id = 30,
                            LabourCode = "P4",
                            Rate = 602.48000000000002,
                            Year = 2026
                        },
                        new
                        {
                            Id = 31,
                            LabourCode = "P5",
                            Rate = 712.25999999999999,
                            Year = 2026
                        },
                        new
                        {
                            Id = 33,
                            LabourCode = "DS",
                            Rate = 269.61000000000001,
                            Year = 2027
                        },
                        new
                        {
                            Id = 34,
                            LabourCode = "SS",
                            Rate = 297.41000000000003,
                            Year = 2027
                        },
                        new
                        {
                            Id = 35,
                            LabourCode = "P1",
                            Rate = 319.63999999999999,
                            Year = 2027
                        },
                        new
                        {
                            Id = 36,
                            LabourCode = "P2",
                            Rate = 408.57999999999998,
                            Year = 2027
                        },
                        new
                        {
                            Id = 37,
                            LabourCode = "P3",
                            Rate = 497.51999999999998,
                            Year = 2027
                        },
                        new
                        {
                            Id = 38,
                            LabourCode = "P4",
                            Rate = 625.37,
                            Year = 2027
                        },
                        new
                        {
                            Id = 39,
                            LabourCode = "P5",
                            Rate = 739.33000000000004,
                            Year = 2027
                        },
                        new
                        {
                            Id = 41,
                            LabourCode = "DS",
                            Rate = 279.85000000000002,
                            Year = 2028
                        },
                        new
                        {
                            Id = 42,
                            LabourCode = "SS",
                            Rate = 308.70999999999998,
                            Year = 2028
                        },
                        new
                        {
                            Id = 43,
                            LabourCode = "P1",
                            Rate = 331.77999999999997,
                            Year = 2028
                        },
                        new
                        {
                            Id = 44,
                            LabourCode = "P2",
                            Rate = 424.11000000000001,
                            Year = 2028
                        },
                        new
                        {
                            Id = 45,
                            LabourCode = "P3",
                            Rate = 516.42999999999995,
                            Year = 2028
                        },
                        new
                        {
                            Id = 46,
                            LabourCode = "P4",
                            Rate = 649.13,
                            Year = 2028
                        },
                        new
                        {
                            Id = 47,
                            LabourCode = "P5",
                            Rate = 767.41999999999996,
                            Year = 2028
                        },
                        new
                        {
                            Id = 49,
                            LabourCode = "DS",
                            Rate = 290.49000000000001,
                            Year = 2029
                        },
                        new
                        {
                            Id = 50,
                            LabourCode = "SS",
                            Rate = 320.44,
                            Year = 2029
                        },
                        new
                        {
                            Id = 51,
                            LabourCode = "P1",
                            Rate = 344.38999999999999,
                            Year = 2029
                        },
                        new
                        {
                            Id = 52,
                            LabourCode = "P2",
                            Rate = 440.22000000000003,
                            Year = 2029
                        },
                        new
                        {
                            Id = 53,
                            LabourCode = "P3",
                            Rate = 536.04999999999995,
                            Year = 2029
                        },
                        new
                        {
                            Id = 54,
                            LabourCode = "P4",
                            Rate = 673.79999999999995,
                            Year = 2029
                        },
                        new
                        {
                            Id = 55,
                            LabourCode = "P5",
                            Rate = 796.58000000000004,
                            Year = 2029
                        },
                        new
                        {
                            Id = 57,
                            LabourCode = "DS",
                            Rate = 301.51999999999998,
                            Year = 2030
                        },
                        new
                        {
                            Id = 58,
                            LabourCode = "SS",
                            Rate = 332.61000000000001,
                            Year = 2030
                        },
                        new
                        {
                            Id = 59,
                            LabourCode = "P1",
                            Rate = 357.48000000000002,
                            Year = 2030
                        },
                        new
                        {
                            Id = 60,
                            LabourCode = "P2",
                            Rate = 456.94999999999999,
                            Year = 2030
                        },
                        new
                        {
                            Id = 61,
                            LabourCode = "P3",
                            Rate = 556.41999999999996,
                            Year = 2030
                        },
                        new
                        {
                            Id = 62,
                            LabourCode = "P4",
                            Rate = 699.40999999999997,
                            Year = 2030
                        },
                        new
                        {
                            Id = 63,
                            LabourCode = "P5",
                            Rate = 826.85000000000002,
                            Year = 2030
                        },
                        new
                        {
                            Id = 65,
                            LabourCode = "DS",
                            Rate = 312.98000000000002,
                            Year = 2031
                        },
                        new
                        {
                            Id = 66,
                            LabourCode = "SS",
                            Rate = 345.25,
                            Year = 2031
                        },
                        new
                        {
                            Id = 67,
                            LabourCode = "P1",
                            Rate = 371.06,
                            Year = 2031
                        },
                        new
                        {
                            Id = 68,
                            LabourCode = "P2",
                            Rate = 474.31,
                            Year = 2031
                        },
                        new
                        {
                            Id = 69,
                            LabourCode = "P3",
                            Rate = 577.55999999999995,
                            Year = 2031
                        },
                        new
                        {
                            Id = 70,
                            LabourCode = "P4",
                            Rate = 725.98000000000002,
                            Year = 2031
                        },
                        new
                        {
                            Id = 71,
                            LabourCode = "P5",
                            Rate = 858.26999999999998,
                            Year = 2031
                        },
                        new
                        {
                            Id = 73,
                            LabourCode = "DS",
                            Rate = 324.88,
                            Year = 2032
                        },
                        new
                        {
                            Id = 74,
                            LabourCode = "SS",
                            Rate = 358.37,
                            Year = 2032
                        },
                        new
                        {
                            Id = 75,
                            LabourCode = "P1",
                            Rate = 385.16000000000003,
                            Year = 2032
                        },
                        new
                        {
                            Id = 76,
                            LabourCode = "P2",
                            Rate = 492.33999999999997,
                            Year = 2032
                        },
                        new
                        {
                            Id = 77,
                            LabourCode = "P3",
                            Rate = 599.50999999999999,
                            Year = 2032
                        },
                        new
                        {
                            Id = 78,
                            LabourCode = "P4",
                            Rate = 753.57000000000005,
                            Year = 2032
                        },
                        new
                        {
                            Id = 79,
                            LabourCode = "P5",
                            Rate = 890.88999999999999,
                            Year = 2032
                        });
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("For")
                        .HasColumnType("longtext");

                    b.Property<int>("Importance")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("ActualCost")
                        .HasColumnType("double");

                    b.Property<string>("AssistantProjectManagerId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProjectManagerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProjectTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("TotalBudget")
                        .HasColumnType("double");

                    b.HasKey("ProjectId");

                    b.HasIndex("AssistantProjectManagerId");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.ResponsibleEngineerEstimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<double>("EstimatedCost")
                        .HasColumnType("double");

                    b.Property<string>("LabourCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectId")
                        .HasColumnType("longtext");

                    b.Property<string>("WPProjectId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ResponsibleEngineerEstimates");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.Timesheet", b =>
                {
                    b.Property<int>("TimesheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("ApproverHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("EmployeeHash")
                        .HasColumnType("longblob");

                    b.Property<DateOnly?>("EndDate")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<double>("FlexHours")
                        .HasColumnType("double");

                    b.Property<double>("Overtime")
                        .HasColumnType("double");

                    b.Property<string>("TimesheetApproverId")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("TotalHours")
                        .HasColumnType("double");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("TimesheetId");

                    b.HasIndex("TimesheetApproverId");

                    b.HasIndex("UserId");

                    b.ToTable("Timesheets");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.TimesheetRow", b =>
                {
                    b.Property<int>("TimesheetRowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalLabourCode")
                        .HasColumnType("longtext");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TimesheetId")
                        .HasColumnType("int");

                    b.Property<double>("TotalHoursRow")
                        .HasColumnType("double");

                    b.Property<string>("WorkPackageId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("WorkPackageProjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long>("packedHours")
                        .HasColumnType("bigint");

                    b.HasKey("TimesheetRowId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TimesheetId");

                    b.HasIndex("WorkPackageId", "WorkPackageProjectId");

                    b.ToTable("TimesheetRows");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.WorkPackage", b =>
                {
                    b.Property<string>("WorkPackageId")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<double>("ActualCost")
                        .HasColumnType("double");

                    b.Property<bool>("IsBottomLevel")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ParentWorkPackageId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ParentWorkPackageProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibleUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("WorkPackageId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ResponsibleUserId");

                    b.HasIndex("ParentWorkPackageId", "ParentWorkPackageProjectId");

                    b.ToTable("WorkPackages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TimesheetApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TimesheetApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimesheetApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TimesheetApp.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TimesheetApp.Models.ApplicationUser", b =>
                {
                    b.HasOne("TimesheetApp.Models.ApplicationUser", "Supervisor")
                        .WithMany("SupervisedUsers")
                        .HasForeignKey("SupervisorId");

                    b.HasOne("TimesheetApp.Models.ApplicationUser", "TimesheetApprover")
                        .WithMany("ApprovableUsers")
                        .HasForeignKey("TimesheetApproverId");

                    b.Navigation("Supervisor");

                    b.Navigation("TimesheetApprover");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.EmployeeProject", b =>
                {
                    b.HasOne("TimesheetApp.Models.TimesheetModels.Project", "Project")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimesheetApp.Models.ApplicationUser", "User")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.EmployeeWorkPackage", b =>
                {
                    b.HasOne("TimesheetApp.Models.ApplicationUser", "User")
                        .WithMany("WorkPackages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimesheetApp.Models.TimesheetModels.WorkPackage", "WorkPackage")
                        .WithMany("EmployeeWorkPackages")
                        .HasForeignKey("WorkPackageId", "WorkPackageProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkPackage");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.Notification", b =>
                {
                    b.HasOne("TimesheetApp.Models.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.Project", b =>
                {
                    b.HasOne("TimesheetApp.Models.ApplicationUser", "AssistantProjectManager")
                        .WithMany("AssistantManagedProjects")
                        .HasForeignKey("AssistantProjectManagerId");

                    b.HasOne("TimesheetApp.Models.ApplicationUser", "ProjectManager")
                        .WithMany("ManagedProjects")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssistantProjectManager");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.Timesheet", b =>
                {
                    b.HasOne("TimesheetApp.Models.ApplicationUser", "TimesheetApprover")
                        .WithMany()
                        .HasForeignKey("TimesheetApproverId");

                    b.HasOne("TimesheetApp.Models.ApplicationUser", "User")
                        .WithMany("Timesheets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimesheetApprover");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.TimesheetRow", b =>
                {
                    b.HasOne("TimesheetApp.Models.TimesheetModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("TimesheetApp.Models.TimesheetModels.Timesheet", "Timesheet")
                        .WithMany("TimesheetRows")
                        .HasForeignKey("TimesheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimesheetApp.Models.TimesheetModels.WorkPackage", "WorkPackage")
                        .WithMany("TimesheetRows")
                        .HasForeignKey("WorkPackageId", "WorkPackageProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Timesheet");

                    b.Navigation("WorkPackage");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.WorkPackage", b =>
                {
                    b.HasOne("TimesheetApp.Models.TimesheetModels.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimesheetApp.Models.ApplicationUser", "ResponsibleUser")
                        .WithMany("SupervisedWorkPackage")
                        .HasForeignKey("ResponsibleUserId");

                    b.HasOne("TimesheetApp.Models.TimesheetModels.WorkPackage", "ParentWorkPackage")
                        .WithMany("ChildWorkPackages")
                        .HasForeignKey("ParentWorkPackageId", "ParentWorkPackageProjectId");

                    b.Navigation("ParentWorkPackage");

                    b.Navigation("Project");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("TimesheetApp.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApprovableUsers");

                    b.Navigation("AssistantManagedProjects");

                    b.Navigation("EmployeeProjects");

                    b.Navigation("ManagedProjects");

                    b.Navigation("Notifications");

                    b.Navigation("SupervisedUsers");

                    b.Navigation("SupervisedWorkPackage");

                    b.Navigation("Timesheets");

                    b.Navigation("WorkPackages");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.Project", b =>
                {
                    b.Navigation("EmployeeProjects");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.Timesheet", b =>
                {
                    b.Navigation("TimesheetRows");
                });

            modelBuilder.Entity("TimesheetApp.Models.TimesheetModels.WorkPackage", b =>
                {
                    b.Navigation("ChildWorkPackages");

                    b.Navigation("EmployeeWorkPackages");

                    b.Navigation("TimesheetRows");
                });
#pragma warning restore 612, 618
        }
    }
}
