@model TimesheetApp.Models.TimesheetModels.TimesheetViewModel
@{
    ViewData["Title"] = "Index";
}
<input type="hidden" id="currentTimesheetId">
<div class="modal fade" tabindex="-1" role="dialog" id="timesheetErrorModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
            </div>
            <div class="modal-body" id="timesheetError">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" tabindex="-1" role="dialog" id="addRowModal" aria-labelledby="customRowTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="customRowTitle">Add Custom Row</h5>
            </div>
            <div class="modal-body" id="timesheetError">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="SHOL" onclick="addExtraRow(this.id)">Add Statutory Holiday Row</button><br/><br/>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="SICK" onclick="addExtraRow(this.id)">Add Sick Time Row</button><br/><br/>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="VACN" onclick="addExtraRow(this.id)">Add Vacation Time Row</button><br/><br/>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="FLEX" onclick="addExtraRow(this.id)">Add Flextime Row</button><br/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" tabindex="-1" role="dialog" id="submitModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Submit and Sign Timesheet</h5>
            </div>
            <div class="modal-body">
                <label for="privateKeyPassword">Signature Password</label>
                <input type="password" id="privateKeyPassword" >
                <label  id="passwordLabel" for="privateKeyPassword" class="text-danger font-weight-bold"></label>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="submitSignature" type="button" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </div>
</div>
@* List of all the sheets *@
<div class="d-flex justify-content-md-between">

    <div style="margin: 0 10px;" class="list-group border">
        <h1 class="text-center"> Sheets</h1>
        <br />
        <div id="timesheets">
        </div>
        <button class="btn btn-secondary" onclick="showAll(this)">Show all...</button>
        <div class="d-flex align-items-center "
            style="display:flex; flex-direction: row; overflow: hidden; white-space: nowrap; margin-top: 10%;">
            <input type="text" id="datepicker" placeholder="Choose date...">
            <button id="createTimesheet" class="btn btn-primary px-2 py-1 mx-2" onclick="createTimesheet()">Create New</button>
        </div>
    </div>

    @* Actual current timesheet box *@
    <div style="width: 80%; margin: 0 10px;">
        <table class="table table-responsive" cellpadding="0"
            cellspacing="0">
            <tr>
                <th>Name</th>
                <th>Employee Number</th>
                <th>Remaining Sick Days</th>
                <th>Remaining Flextime</th>
                <th>Week Number</th>
                <th>Week Ends</th>
            </tr>
            <tr>
                <td>
                    @if (@Model.CurrentUser != null)
                    {
                        @Model.CurrentUser.FirstName
                        <text>
                        &nbsp;
                        </text>
                        @Model.CurrentUser.LastName
                    }
                </td>
                <td>
                    @if (@Model.CurrentUser != null){
                        @Model.CurrentUser.EmployeeNumber
                    }
                </td>
                <td id="SickdaysDisplay">
                    @if (@Model.CurrentUser != null)
                    {
                        @Model.CurrentUser.SickDays
                    }
                </td>
                <td id="FlexhourDisplay">
                    @if (@Model.CurrentUser != null)
                    {
                        @Model.CurrentUser.FlexTime
                    }
                </td>
                <td id="weekNumber"></td>
                <td id="weekEnds"></td>
            </tr>
        </table>
        <table id="rowTable" class="table table-bordered table-responsive table-striped " cellpadding="0"
            cellspacing="0">
            <tr>
                <th>Project</th>
                <th>WP</th>
                <th>Sat</th>
                <th>Sun</th>
                <th>Mon</th>
                <th>Tue</th>
                <th>Wed</th>
                <th>Thu</th>
                <th>Fri</th>
                <th>Total</th>
                <th>Notes</th>
            </tr>
        </table>
        <table class="table table-responsive" cellpadding="0" cellspacing="0">
            <tr>
                <th>Weekly Overage</th>
            </tr>
            <tr>
                <td id="weeklyOverage">
                    0
                </td>
            </tr>
        </table>
        <table class="table table-responsive" cellpadding="0" cellspacing="0">
            <tr>
                <th>Overtime</th>
                <th>Flextime</th>
            </tr>
            <tr>
                @if(Model.Timesheets != null && Model.Timesheets.Count() > 0 && Model.TimesheetRows != null && Model.TimesheetRows.Count() > 0){
                    var timesheet = Model.Timesheets.Where(c => c.TimesheetId == Model.TimesheetRows.First().TimesheetId).First();
                    <td>
                        <input id="overtime" type="number" value="@timesheet.Overtime" @((timesheet.EmployeeHash != null) ? "disabled" : "")>
                    </td>
                    <td>
                        <input id="flextime" type="number" value="@timesheet.FlexHours" @((timesheet.EmployeeHash != null) ? "disabled" : "")>
                    </td>
                } else {
                    <td>
                        <input id="overtime" type="number" value="0">
                    </td>
                    <td>
                        <input id="flextime" type="number" value="0">
                    </td>
                }
            </tr>
        </table>
        <h3 id="messageHeader" style="display: none;">Approver Message</h3>
        <div id="approverMessage"></div>
        <button type="button" data-bs-toggle="modal" data-bs-target="#addRowModal" class="w-100 btn btn-lg btn-secondary px-4 py-2 TSButtons">Add Row</button>
        <input type="button" value="Submit Timesheet" class="w-100 btn btn-lg btn-primary px-4 py-2 mt-4 TSButtons" onclick="submitTimesheet()">
    </div>
</div>

@section Scripts{
        <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
        <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
        <script>
            let globalTotals = 0;
            let readonlyExists = false;

            function createTimesheet() {
                let end = document.querySelector("#datepicker").value;
                fetch("/Timesheet/CreateTimesheet", {
                    method: "POST",
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(
                        end
                    ),
                }).then(async (response) => {
                    if (response.status != 200) {
                        document.querySelector("#timesheetError").innerHTML = await response.json();
                        var myModalEl = document.querySelector("#timesheetErrorModal");
                        var modal = new bootstrap.Modal(myModalEl);
                        modal.show();
                        return;
                    }
                    return await response.json();
                }).then((response) => {
                    if(response){
                        addTimesheet(response.endDate, response.totalHours, response.timesheetId, false, response.employeeHash != null, false, null, response.flexHours, response.overtime);
                    }
                });
            }

            $(function () {
                $("#datepicker").datepicker();
            });
            function containsOnlyNumbers(str) {
              return /^[0-9]+$/.test(str);
              }

            //Edit event handler.
           $("body").on("click", "#rowTable .Edit", function () {
                var row = $(this).closest("tr");
                $("td", row).each(function () {
                    if ($(this).find("input").length > 0) {
                        $(this).find("input").css("width", "100%");
                        $(this).find("input").show();
                        $(this).find("span").hide();
                    }
                });
                row.find(".Update").show();
                row.find(".Cancel").show();
                row.find(".Delete").hide();
                $(this).hide();
            });

            //Update event handler.
            $("body").on("click", "#rowTable .Update", function () {
                var toHide = [];
                var toShow = [];
                var row = $(this).closest("tr");
                const days = new Map([
                            ["0", "Saturday"],
                            ["1", "Sunday"],
                            ["2", "Monday"],
                            ["3", "Tuesday"],
                            ["4", "Wednesday"],
                            ["5", "Thursday"],
                            ["6", "Friday"],
                        ]);
                var errors = "";
                var isInputError = false;
                var data = {}; // create an empty object
                data["TimesheetRowId"] = row.attr('id') + "";
                $("td", row).each(function (index) {
                  var errorResponse = [];
                    var key = $(this).attr("class");
                    var value = $(this).find("input").val() || $(this).text();
                    data[key] = value; // add key-value pair to the object
                    if (key.length < 4 && (value.length > 2 || !containsOnlyNumbers(value))) {
                      value = 0;
                      var errKey = `${index - 2}`;
                      var error = {};
                      error[errKey] = "invalid input";
                      errorResponse.push(error);
                      isInputError = true;
                    }

                    if (errorResponse.length != 0) {
                      console.log(errorResponse)
                      errorResponse.forEach(function(k, i){
                        var objKey = Object.keys(k)[0];
                        errors += days.get(objKey) + " has the error: " + Object.values(errorResponse[i])[0] + "<br/>";
                      });
                    }
                    
                    if ($(this).find("input").length > 0) {
                        var span = $(this).find("span");
                        var input = $(this).find("input");
                        span.html(input.val());
                        toShow.push(span);
                        toHide.push(input);
                    }
                });
                if(errors.length > 0){
                    document.querySelector("#timesheetError").innerHTML = errors;
                    var myModalEl = document.querySelector("#timesheetErrorModal");
                    var modal = new bootstrap.Modal(myModalEl);
                    modal.show();
                     return;
                }
                data["TimesheetId"] = document.querySelector("#currentTimesheetId").value;
                if (!isInputError) {
                  toShow.push(row.find(".Edit"));
                toShow.push(row.find(".Delete"));
                toHide.push(row.find(".Cancel"));
                toHide.push($(this));
                fetch("/Timesheet/UpdateRow", {
                    method: "POST",
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data),
                }).then(async (response) => {
                    if (response.status != 200) {
                        var errorResponse = await response.json();
                        Object.keys(errorResponse).forEach(function(k){
                            errors += days.get(k) + " has the error: " + errorResponse[k] + "<br/>";
                        });
                         document.querySelector("#timesheetError").innerHTML = errors;
                        var myModalEl = document.querySelector("#timesheetErrorModal");
                        var modal = new bootstrap.Modal(myModalEl);
                        modal.show();
                    } else {
                        return await response.json();
                    }
                }).then((r) => {
                    if(r != null){
                        document.querySelector("#Timesheet" + document.querySelector("#currentTimesheetId").value + " * .totalHours").innerHTML = "Hours: " + r.totalHours;
                        addTableRow(r.projectId, r.workPackageId, r.totalHoursRow, r.sat, r.sun, r.mon, r.tue, r.wed, r.thu, r.fri, r.notes, r.timesheetRowId, false);
                        updateTotals(false);
                        for (let i = 0; i < toHide.length; i++) {
                            toHide[i].hide();
                        }
                        toShow.forEach((c) => {
                            c.show();
                        });
                    }
                    
                });
                }
            }
            );

            //Cancel event handler.
            $("body").on("click", "#rowTable .Cancel", function () {
                var row = $(this).closest("tr");
                $("td", row).each(function () {
                    if ($(this).find("input").length > 0) {
                        var span = $(this).find("span");
                        var input = $(this).find("input");
                        input.val(span.html());
                        span.show();
                        input.hide();
                    }
                });
                row.find(".Edit").show();
                row.find(".Delete").show();
                row.find(".Update").hide();
                $(this).hide();
            });


            function addTimesheet(endDate, totalHours, timesheetId, active, readonly, accepted, approverMessage, flexhours, overtime) {
                let timesheetsDiv = document.getElementById('timesheets');
                let newTimesheet = document.createElement('a');
                newTimesheet.id = "Timesheet" + timesheetId;
                newTimesheet.className = 'list-group-item list-group-item-action';
                let message = document.createElement('a');
                message.style.display = "none";
                message.className = "message";
                message.innerHTML = approverMessage;
                newTimesheet.appendChild(message);
                let overtimeHidden = document.createElement('a');
                overtimeHidden.style.display = "none";
                overtimeHidden.className = "overtime";
                overtimeHidden.innerHTML = overtime;
                newTimesheet.appendChild(overtimeHidden);
                let flexhoursHidden = document.createElement('a');
                flexhoursHidden.style.display = "none";
                flexhoursHidden.className = "flexhours";
                flexhoursHidden.innerHTML = flexhours;
                newTimesheet.appendChild(flexhoursHidden);
                if(readonly) {
                    newTimesheet.className = 'list-group-item list-group-item-secondary readonly';
                }
                if (accepted) {
                    newTimesheet.className = 'list-group-item list-group-item-success readonly';
                }
                if (approverMessage != "" && approverMessage != null) {
                    newTimesheet.className = 'list-group-item list-group-item-danger';
                }
                newTimesheet.value = timesheetId + "";
                if(active){
                    newTimesheet.classList.add('activeSheet');
                    document.querySelector("#currentTimesheetId").value = timesheetId + "";
                    if(readonly){
                        readonlyExists = true;
                    }
                    document.querySelector("#weekEnds").innerHTML = endDate;
                    document.querySelector("#weekNumber").innerHTML = getWeek(new Date(endDate));
                    if(approverMessage != ""){
                        document.querySelector("#messageHeader").style.display = "inline";
                        document.querySelector("#approverMessage").innerHTML = approverMessage;
                    }
                }
                newTimesheet.addEventListener('click', function() {
                    let timesheets = document.querySelectorAll('#timesheets a');
                    for (let i = 0; i < timesheets.length; i++) {
                        timesheets[i].classList.remove('activeSheet');
                        if (timesheets[i] === newTimesheet) {
                            timesheets[i].classList.add('activeSheet');
                        }
                    }
                    document.querySelector("#currentTimesheetId").value = this.value;
                    fetch("/Timesheet/GetTimesheet", {
                        method: "POST",
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(this.value),
                    }).then(async (response) => {
                        if (response.status == 200) {
                            return await response.json();
                        }
                    }).then((response) => {
                        var readonlyRow = document.querySelector("#Timesheet" + this.value).classList.contains("readonly");
                        if(readonlyRow){
                            document.querySelectorAll(".TSButtons").forEach((c) => {
                                c.style.display = "none";
                            });
                        } else {
                            document.querySelectorAll(".TSButtons").forEach((c) => {
                                c.style.display = "inline";
                            });
                        }
                        if(response != null){
                            var table = document.getElementById("rowTable");
                            const childElements = table.querySelectorAll(':scope > tbody > [id]');
                            childElements.forEach(c => {
                                c.remove();
                            });
                            response.forEach((cell) => {
                                addTableRow(cell.projectId, cell.workPackageId, cell.sat + cell.sun + cell.mon + cell.tue + cell.wed + cell.thu + cell.fri, cell.sat, cell.sun, cell.mon, cell.tue, cell.wed, cell.thu, cell.fri, cell.notes, cell.timesheetRowId, readonlyRow);
                            });
                            var message = document.querySelector("#Timesheet" + this.value + " > .message").innerHTML;
                            if(message == ""){
                                document.querySelector("#messageHeader").style.display = "none";
                                document.querySelector("#approverMessage").innerHTML = message;
                            } else {
                                document.querySelector("#messageHeader").style.display = "inline";
                                document.querySelector("#approverMessage").innerHTML = message;
                            }
                            var date = document.querySelector("#Timesheet" + document.querySelector("#currentTimesheetId").value + " * .endDate").innerHTML.substring(10);
                            document.querySelector("#weekEnds").innerHTML = date;
                            document.querySelector("#weekNumber").innerHTML = getWeek(new Date(date));
                            if (readonlyRow){
                                document.querySelector("#overtime").disabled = true;
                                document.querySelector("#flextime").disabled = true;
                            } else {
                                document.querySelector("#overtime").disabled = false;
                                document.querySelector("#flextime").disabled = false;
                            }
                            document.querySelector("#overtime").value = this.querySelector(".overtime").innerHTML;
                            document.querySelector("#flextime").value = this.querySelector(".flexhours").innerHTML;
                            updateTotals(readonlyRow);
                            updateWeeklyOverage();
                        }
                    });
                });

                let timesheetDiv = document.createElement('div');
                let endDateDiv = document.createElement('div');
                endDateDiv.className = "endDate";
                endDateDiv.textContent = 'End Date: ' + endDate;
                let totalHoursDiv = document.createElement('div');
                totalHoursDiv.className = "totalHours";
                totalHoursDiv.textContent = 'Hours: ' + totalHours;
                let weekNum = document.createElement('div');
                weekNum.textContent = 'Week Number: ' + getWeek(new Date(endDate));
                timesheetDiv.appendChild(endDateDiv);
                timesheetDiv.appendChild(weekNum);
                timesheetDiv.appendChild(totalHoursDiv);
                newTimesheet.appendChild(timesheetDiv);
                timesheetsDiv.appendChild(newTimesheet);
            }

            function getWeek(date) {
                const firstDayOfYear = new Date(date.getFullYear(), 0, 1);
                const daysSinceFirstDay = (date - firstDayOfYear) / 86400000; // 86400000 = 24 hours * 60 minutes * 60 seconds * 1000 milliseconds
                const weekNumber = Math.ceil((daysSinceFirstDay + firstDayOfYear.getDay() + 1) / 7);
                return weekNumber;
            }

            @foreach (TimesheetApp.Models.TimesheetModels.Timesheet timesheet in Model.Timesheets!)
            {
                <text>
                        addTimesheet("@timesheet.EndDate", "@timesheet.TotalHours", "@timesheet.TimesheetId", "@timesheet.CurrentlySelected" == "True", "@timesheet.EmployeeHash" != "", false, "@timesheet.ApproverNotes", "@timesheet.FlexHours", "@timesheet.Overtime");
                </text>
            }

           function addTableRow(projectId, workPackageId, totalHours, sat, sun, mon, tue, wed, thu, fri, notes, timesheetRowId, readonly) {
                var table = document.getElementById("rowTable");
                var row = document.getElementById(timesheetRowId);

                if (row) { // if row with the same id exists, update values in existing row
                    row.querySelector(".ProjectId span").textContent = projectId;
                    row.querySelector(".WorkPackageId span").textContent = workPackageId;
                    row.querySelector(".Sat span").textContent = sat;
                    row.querySelector(".Sun span").textContent = sun;
                    row.querySelector(".Mon span").textContent = mon;
                    row.querySelector(".Tue span").textContent = tue;
                    row.querySelector(".Wed span").textContent = wed;
                    row.querySelector(".Thu span").textContent = thu;
                    row.querySelector(".Fri span").textContent = fri;
                    row.querySelector(".TotalHours span").textContent = totalHours;
                    row.querySelector(".Notes span").textContent = notes;
                    return; // exit function since row was updated
                }

                // if row with the same id doesn't exist, add new row at the end
                row = table.insertRow(table.rows.length - 1);
                row.id = timesheetRowId + "";

                if(notes == undefined){
                    notes = "";
                }

                // create cells and input fields with values
                var cells = [
                    "<td class='ProjectId'><span>" + projectId + "</span></td>",
                    "<td class='WorkPackageId'><span>" + workPackageId + "</span></td>",
                    "<td class='Sat'>" + (!readonly ? "<span>" + sat + "</span><input style='display: none; width:10%;' type='text' value='" + sat + "' />" : sat) + "</td>",
                    "<td class='Sun'>" + (!readonly ? "<span>" + sun + "</span><input style='display: none; width:10%;' type='text' value='" + sun + "' />" : sun) + "</td>",
                    "<td class='Mon'>" + (!readonly ? "<span>" + mon + "</span><input style='display: none; width:10%;' type='text' value='" + mon + "' />" : mon) + "</td>",
                    "<td class='Tue'>" + (!readonly ? "<span>" + tue + "</span><input style='display: none; width:10%;' type='text' value='" + tue + "' />" : tue) + "</td>",
                    "<td class='Wed'>" + (!readonly ? "<span>" + wed + "</span><input style='display: none; width:10%;' type='text' value='" + wed + "' />" : wed) + "</td>",
                    "<td class='Thu'>" + (!readonly ? "<span>" + thu + "</span><input style='display: none; width:10%;' type='text' value='" + thu + "' />" : thu) + "</td>",
                    "<td class='Fri'>" + (!readonly ? "<span>" + fri + "</span><input style='display: none; width:10%;' type='text' value='" + fri + "' />" : fri) + "</td>",
                    "<td class='TotalHours'><span>" + totalHours + "</span></td>",
                    "<td class='Notes'>" + (!readonly ? "<span>" + notes + "</span><input style='display: none; width:10%;' type='text' value='" + notes + "' />" : notes) + "</td>"
                ];

                // add buttons only if editable is true
                if (!readonly) {
                    cells.push("<td class='d-flex justify-content-md-between'><a class='Edit btn btn-warning rounded w-auto' href='javascript:;'>Edit</a>&nbsp;<a class='Update btn btn-success rounded w-100' style='display: none;' href='javascript:;'>Update</a>&nbsp;<a style='display: none;' class='Cancel m-auto btn btn-danger rounded w-100' href='javascript:;'>Cancel</a></td>");
                }

                // insert cells into row
                for (var i = 0; i < cells.length; i++) {
                    row.innerHTML += cells[i];
                }
            }
            updateTotals(readonlyExists);

            @foreach (var row in Model.TimesheetRows!)
            {
                <text>
                        if(readonlyExists){
                            document.querySelectorAll(".TSButtons").forEach((c) => {
                                c.style.display = "none";
                            });
                        }
                        addTableRow("@row.ProjectId", "@row.WorkPackageId", @row.TotalHoursRow, @row.Sat, @row.Sun, @row.Mon, @row.Tue, @row.Wed, @row.Thu, @row.Fri, "@row.Notes", "@row.TimesheetRowId", readonlyExists);
                </text>
            }

            updateTotals(readonlyExists);

            function submitTimesheet(){
                var myModalEl = document.getElementById('submitModal');
                var modal = new bootstrap.Modal(myModalEl);
                modal.show();

                var old_element = document.querySelector("#submitSignature");
                var new_element = old_element.cloneNode(true);
                old_element.parentNode.replaceChild(new_element, old_element);

                console.log("Before click");
                document.querySelector("#submitSignature").addEventListener("click", () => {
                    var overtime = document.querySelector("#overtime").value;
                    var flexhours = document.querySelector("#flextime").value;
                    if (overtime == null || overtime == "") {
                        overtime = 0;
                    }
                    if (flexhours == null || flexhours == "") {
                        flexhours = 0;
                    }
                     fetch("/Timesheet/SubmitTimesheet", {
                        method: "POST",
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            password: document.querySelector("#privateKeyPassword").value,
                            timesheet: document.querySelector("#currentTimesheetId").value,
                            flexhours: flexhours,
                            overtime: overtime
                        }),
                    })
                    .then(async (response) => {
                        if(response.status == 401){
                            document.querySelector("#passwordLabel").innerHTML = "Incorrect Password";
                        } else if (response.status == 400) {
                            var myModalEl = document.querySelector("#timesheetErrorModal");
                            myModalEl.querySelector("#timesheetError").innerHTML = await response.text();
                            var submitModal = document.getElementById('submitModal');
                            var modal1 = bootstrap.Modal.getInstance(submitModal)
                            modal1.hide();
                            var modal = new bootstrap.Modal(myModalEl);
                            modal.show();
                        } else {
                            var myModalEl = document.getElementById('submitModal');
                            var modal = bootstrap.Modal.getInstance(myModalEl)
                            modal.hide();
                            return await response.json();
                        } 
                    }).then((response) => {
                        if(response != null){
                            document.querySelector("#Timesheet" + document.querySelector("#currentTimesheetId").value).className = "list-group-item list-group-item-secondary readonly";    
                            document.querySelectorAll(".TSButtons").forEach((c) => {
                                c.style.display = "none";
                            });
                            var table = document.getElementById("rowTable");
                            const childElements = table.querySelectorAll(':scope > tbody > [id]');
                            childElements.forEach(c => {
                                c.remove();
                            });
                            response.forEach((cell) => {
                                addTableRow(cell.projectId, cell.workPackageId, cell.sat + cell.sun + cell.mon + cell.tue + cell.wed + cell.thu + cell.fri, cell.sat, cell.sun, cell.mon, cell.tue, cell.wed, cell.thu, cell.fri, cell.notes, cell.timesheetRowId, true);
                            });
                            document.querySelector("#overtime").disabled = true;
                            document.querySelector("#flextime").disabled = true;
                            updateTotals(true);
                        }
                    });
                });
            }

            function showAll(obj){
                 fetch("/Timesheet/GetAll")
                    .then(async (response) => {
                        return await response.json();
                    }).then((c) => {
                        obj.style.display = "none";
                        c.forEach((response) => {
                            addTimesheet(response.endDate, response.totalHours, response.timesheetId, false, response.employeeHash != null, true, null, response.flexTime, response.overtime);
                        });
                    });
            }

            function updateTotals(readonly) {
                globalTotals = 0;
                var table = document.getElementById("rowTable");
                var rowCount = table.rows.length;
                var totalsRow = null;

                // Search for existing totals row
                for (var i = 0; i < rowCount; i++) {
                    if (table.rows[i].classList.contains("totals-row")) {
                    totalsRow = table.rows[i];
                    break;
                    }
                }

                // If totals row doesn't exist, create a new one
                if (!totalsRow) {
                    totalsRow = table.insertRow(rowCount);
                    totalsRow.classList.add("totals-row");

                    // Add empty cells for Project, WP, and Notes columns
                    var emptyCells = "<td></td><td>Total:</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td>";
                    var totalCell = "<td>Total</td>";
                    var notesCell = "<td></td>";
                    var cells = emptyCells + totalCell + notesCell;
                    totalsRow.innerHTML = cells;
                }
                var totalHours = [0, 0, 0, 0, 0, 0, 0, 0, 0];
                for (var i = 1; i < rowCount; i++) {
                    var row = table.rows[i];
                    var cells = row.cells;

                    // Skip totals row and rows with empty cells
                    if (row == totalsRow || cells.length < 10) {
                    continue;
                    }

                    // Update total hours for each day of the week
                    for (var j = 2; j <= 9; j++) {
                        var hours;
                            hours = parseFloat(cells[j].textContent);
                        if (!isNaN(hours)) {
                            totalHours[j - 2] += hours;
                        }
                    }
                }
                var flexTime = 0;
                // Update total cells in totals row
                for (var j = 2; j <= 9; j++) {
                    var totalCell = totalsRow.cells[j];
                    totalCell.innerHTML = "<span>" + totalHours[j - 2] + "</span>";
                }
                var totalOfTotals = totalHours[7];
                if(totalOfTotals > 40){
                    totalOfTotals -= 40;
                    globalTotals = totalOfTotals;
                } else {
                    totalOfTotals = 0;
                }
                updateWeeklyOverage();
            }

            function addExtraRow(type){
                fetch("/Timesheet/AddCustomRow", {
                    method: "POST",
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        type: type,
                        timesheetId: document.querySelector("#currentTimesheetId").value + ""
                    }),
                }).then(async (response) => {
                    if (response.status == 200) {
                        return await response.json();
                    }
                }).then((r) => {
                    if(r){
                        addTableRow(r.projectId, r.workPackageId, r.totalHoursRow, r.sat, r.sun, r.mon, r.tue, r.wed, r.thu, r.fri, r.notes, r.timesheetRowId, false);
                    }
                });
            }

            document.querySelector("#overtime").addEventListener("input", () => {
                updateWeeklyOverage();
            })

            document.querySelector("#flextime").addEventListener("input", () => {
                updateWeeklyOverage();
            })

            function updateWeeklyOverage(){
                var flextime = document.querySelector("#flextime").value;
                var overtime = document.querySelector("#overtime").value;
                document.querySelector("#weeklyOverage").innerHTML = globalTotals - flextime - overtime;
            }
        </script>
          @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
  }
}
