@model TimesheetApp.Models.WorkPackageViewModel

@{
ViewData["Title"] = "Manage Project";
}

<head>
    <title>@ViewData["Title"]</title>
</head>
<h1>@ViewData["Title"]</h1>

<div class="d-flex justify-content-around mb-3">
    <div>
        <h2>Manage Work Packages</h2>
        <input type="text" id="WPSearch" placeholder="Search for work package..." oninput="search(this.value)" class="form-control w-100"/>
    </div>
    <div id="assignASM">
        <h2>Assign Assistant Manager</h2>
        <div class="btn-group form-control w-100 p-0 border-0">
            <input type="text" class="dropdown-toggle form-control w-100" data-bs-toggle="dropdown" aria-expanded="false"
                onkeyup="filterDropdown(event)" id=employeeSearchBox placeholder="Search Employee..."/>
            <ul class="dropdown-menu" aria-labelledby="employeeDropdown" id="employeeMenu">
            </ul>
            <div>

            <!-- Button trigger modal -->
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" onclick="populateModal()">
            Confirm
            </button>
            </div>
        </div>
    </div>
</div>
<div id="WorkPackages" class="accordian"></div>
<input type="hidden" id="currentWP" />
<input type="hidden" id="currentProject"/>
<div id="modal-placeholder"></div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Assign Assistant Project Manager</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p id="innerModalBody"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="assignASM()" data-bs-dismiss="modal">Save changes</button>
      </div>
    </div>
  </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="employeeModal">
    <div class="modal-dialog" role="document" style="max-width: 70%;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Employee</h5>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="LGtabs" role="tablist">
                    @{
                        bool isFirst = true;
                    }
                    @foreach (var lg in Model.LabourGrades!)
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @((isFirst) ? "active" : "")" id="@lg.LabourCode-tab" data-bs-toggle="tab" data-bs-target="#AE@(lg.LabourCode)" type="button"
                                role="tab" aria-controls="@lg.LabourCode" aria-selected="@((isFirst) ? "true" : "false")">@lg.LabourCode</button>
                        </li>
                        isFirst = false;
                    }
                </ul>
                <div class="tab-content" id="myTabContent">
                    @{
                        isFirst = true;
                    }
                    @foreach (var lg in Model.LabourGrades!)
                    {
                        <div class="columnList tab-pane fade @((isFirst) ? "show active" : "")" id="AE@(lg.LabourCode)" role="tabpanel" aria-labelledby="@lg.LabourCode-tab">
                        </div>
                        isFirst = false;
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="assignEmployeesButton" type="button" class="btn btn-primary" onclick="assignEmployeeToWp()">Update</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="budgetModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Budget Details</h5>
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="warningModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Warning!</h5>
            </div>
            <div class="modal-body" id="warningModalBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" id="cancelWarning">Cancel</button>
                <button type="button" class="btn btn-primary" id="continueWarning">Continue</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="RespEngModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Responsible Engineer</h5>
            </div>
            <div class="modal-body">
                <div id="candidateEmployees" class="columnList">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button id="assignRE" type="button" class="btn btn-primary" onclick="assignResponsibleEngineer()">Assign</button>

            </div>
        </div>
    </div>
</div>

<script>
    let currentWorkPackage = "";
    let bottomLevelWorkPackage = "";

    // assigned emp list
    let ul;

    // assigned resp engineer
    let assignedRespEng;
    window.onload = function(){
        isPrimaryPM("@Model.wps![0]!.Project!.ProjectManagerId");
    }
    

    @foreach(var wp in Model.wps) {
        <text >
            var firstname = null;
        var lastname = null;
        document.querySelector("#currentProject").value = "@wp.ProjectId";
        </text>
        @if(wp.ResponsibleUser != null) {
                <text >
                    firstname = "@wp.ResponsibleUser.FirstName";
                    lastname = "@wp.ResponsibleUser.LastName";
                </text>
            }
            <text>
            (async function () {
                await addWP("@wp.WorkPackageId", "@wp.Title", firstname, lastname, "@wp.IsClosed" ==="True", "@wp.IsBottomLevel" === "True", "@wp.ParentWorkPackageId", @wp.ParentWorkPackageProjectId, @wp.TotalBudget, @wp.TotalRemaining);
            })();
            </text>
    }

    function createRow(caption, object, caption2, object2, hidden) {
        let row = document.createElement('tr');
        let data1 = document.createElement('td');
        data1.className = "listLabel";
        let data2 = document.createElement('td');
        data2.className = "listLabel";
        let data3 = document.createElement('td');
        data3.className = "listLabel";
        let data4 = document.createElement('td');
        data4.className = "listLabel";
        let captionObj = document.createElement('span');
        let captionObj2 = document.createElement('span');
        captionObj.innerHTML = caption;
        data1.appendChild(captionObj);
        data2.appendChild(object);
        data2.style = "width: 35%; text-align: left;"
        row.appendChild(data1);
        row.appendChild(data2);

        if (caption2 !== null) {
            captionObj2.innerHTML = caption2;
            data3.appendChild(captionObj2);
            data4.appendChild(object2);
        }
        row.appendChild(data3);
        row.appendChild(data4);
        if (hidden) {
            row.style = "display: none;";
        }
        return row;
    }

    async function addWP(WorkPackageId, Title, ResponsibleUserFN, ResponsibleUserLN, IsClosed, IsBottomLevel,
        ParentWorkPackageId, ParentWorkPackageProjectId, totalBudget, remainingBudget) {
        let employeeButton = null;
        let item = document.createElement("div");
        item.className = "accordion-item";

        let headerDiv = document.createElement("h2");
        headerDiv.className = "accordion-header";
        headerDiv.id = "dropdownID" + WorkPackageId;

        let header = document.createElement("button");
        header.className = "accordion-button collapsed";
        header.type = "button";
        header.setAttribute("data-bs-toggle", "collapse");
        header.setAttribute("data-bs-target", "#Panel" + WorkPackageId);
        header.setAttribute("aria-expanded", false);
        header.setAttribute("aria-controls", "Panel" + WorkPackageId);
        header.innerHTML = WorkPackageId + ": " + Title;

        headerDiv.appendChild(header);
        item.appendChild(headerDiv);

        let collapse = document.createElement("div");
        collapse.id = "Panel" + WorkPackageId;
        collapse.className = "accordion-collapse collapse";
        collapse.setAttribute("aria-labelledby", "dropdownID" + WorkPackageId);

        let div = document.createElement("div");
        div.className = "accordion-body";
        div.id = "WP" + WorkPackageId;

        let splitButton = document.createElement("button");
        splitButton.value = WorkPackageId;
        splitButton.name = "name";
        splitButton.className = "label";

        splitButton.addEventListener('click', async function callSplit(info) {
            currentWorkPackage = info.srcElement.value;
            await fetch('/Project/ShowSplit')
            .then(function(data){
                return data.text();
            }).then(function(data){
                document.querySelector("#modal-placeholder").innerHTML = data;
                document.querySelector("#parentWPID").value = WorkPackageId;
                var myModalEl = document.getElementById('splitModal');
                var modal = new bootstrap.Modal(myModalEl);
                modal.show();
                //only append to the start if its not right under the project
                if(WorkPackageId !== "0"){
                    document.querySelector("#newIdPartial").innerHTML = WorkPackageId;
                }
                let errors = "";
                //submit creation of sub work package
                document.querySelector("#newWPForm").addEventListener('submit', async function submitForm (event) {
                    event.preventDefault();
                    const formData = new FormData(document.querySelector("#newWPForm"));
                    await fetch("/Project/BudgetDetails", {
                        method: "POST",
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            workPackageId: formData.get("WorkPackage.ParentWorkPackageId")
                        }),
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((response) => {
                        response.forEach((c) => {
                            for(var i = 0; i < response.length; i++){
                                if(formData.get("budgets[" + i + "].LabourCode") == c.labourCode){
                                    if(parseFloat(formData.get("budgets[" + i + "].Days")) > c.days){
                                        errors += formData.get("budgets[" + i + "].LabourCode") + " Days<br/>";
                                    }
                                    if(parseInt(formData.get("budgets[" + i + "].People")) > c.people){
                                        errors += formData.get("budgets[" + i + "].LabourCode") + " People<br/>";
                                    }
                                }
                            }
                        });
                    });

                    if(errors.length > 0){
                        document.querySelector("#warningModalBody").innerHTML = "The budget for this work package passes the total budget of the parent work package. Do you want to continue?<br/>Fields that are over:<br/>" + errors;
                        let modalObj = new bootstrap.Modal(document.querySelector("#warningModal"));
                        modalObj.show();
                        document.querySelector("#cancelWarning").addEventListener("click", () => {
                            var myModalEl = document.querySelector("#warningModal");
                            var modal = bootstrap.Modal.getInstance(myModalEl)
                            modal.hide();
                            myModalEl = document.querySelector("#splitModal");
                            modal = bootstrap.Modal.getInstance(myModalEl)
                            modal.hide();
                        });
                        document.querySelector("#continueWarning").addEventListener("click", () => {
                            executeSplit();
                            var myModalEl = document.querySelector("#warningModal");
                            var modal = bootstrap.Modal.getInstance(myModalEl)
                            modal.hide();
                            myModalEl = document.querySelector("#splitModal");
                            modal = bootstrap.Modal.getInstance(myModalEl)
                            modal.hide();
                        });
                    } else {
                        executeSplit();
                    }


                });
            });
        }, false);
        splitButton.type = "button";
        splitButton.innerHTML = "Create Subpackage";
        splitButton.className = "label btn btn-primary";
        splitButton.id = "SPLIT" + WorkPackageId;
        div.appendChild(splitButton);

        let budgetDetailsButton = document.createElement("button");
        budgetDetailsButton.value = WorkPackageId;
        budgetDetailsButton.name = "name";
        budgetDetailsButton.className = "label";
        budgetDetailsButton.innerHTML = "Budget Details";
        budgetDetailsButton.type = "button";
        budgetDetailsButton.className = "label btn btn-info";
        budgetDetailsButton.addEventListener('click', async function callSplit(info) {
            await fetch("/Project/BudgetDetails", {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    workPackageId: budgetDetailsButton.value
                }),
            })
            .then((response) => {
                return response.json();
            })
            .then((response) => {
                let modal = document.getElementById('budgetModal');
                let body = modal.querySelector(":scope * .modal-body");
                body.innerHTML = "";

                let table = document.createElement("table");
                table.className = "table table-striped";

                let table2 = document.createElement("table");
                table2.className = "table table-striped";

               // Create the table body
                let tbody = document.createElement("tbody");

                if(response[0].length !== 0){
                                    // Create the table header
                    let header = document.createElement("thead");
                    let headerRow = document.createElement("tr");
                    let labourCodeHeader = document.createElement("th");
                    labourCodeHeader.textContent = "Labour Code";
                    headerRow.appendChild(labourCodeHeader);

                    let budgetTotalHeader = document.createElement("th");
                    budgetTotalHeader.textContent = "Days ";
                    headerRow.appendChild(budgetTotalHeader);

                    let remainingBudgetHeader = document.createElement("th");
                    remainingBudgetHeader.textContent = "People";
                    headerRow.appendChild(remainingBudgetHeader);

                    let budgetTotalHeaderD = document.createElement("th");
                    budgetTotalHeaderD.textContent = "P.D. ";
                    headerRow.appendChild(budgetTotalHeaderD);

                    header.appendChild(headerRow);
                    table.appendChild(header);

                    response[0].forEach((res) => {
                        var row = document.createElement("tr");

                        // Labour Code cell
                        var labourCodeCell = document.createElement("td");
                        labourCodeCell.textContent = res.labourCode;
                        row.appendChild(labourCodeCell);

                        // Budget Total cell
                        var budgetTotalCell = document.createElement("td");
                        budgetTotalCell.textContent = res.days;
                        row.appendChild(budgetTotalCell);

                        // Remaining Budget cell
                        var remainingBudgetCell = document.createElement("td");
                        remainingBudgetCell.textContent = res.people;
                        row.appendChild(remainingBudgetCell);

                        var budgetTotalCellD = document.createElement("td");
                        budgetTotalCellD.textContent = res.days * res.people;
                        row.appendChild(budgetTotalCellD);

                        tbody.appendChild(row);
                    });
                    table.appendChild(tbody);
                    var title = document.createElement("h3");
                    title.innerHTML = "Project Manager's Budget";
                    body.appendChild(title);
                    body.appendChild(table);
                }
                let tbody2 = document.createElement("tbody");

                if(response[1].length !== 0){
                    // Create the table header
                    let header2 = document.createElement("thead");
                    let headerRow2 = document.createElement("tr");
                    let labourCodeHeader2 = document.createElement("th");
                    labourCodeHeader2.textContent = "Labour Code";
                    headerRow2.appendChild(labourCodeHeader2);

                    let budgetTotalHeader2 = document.createElement("th");
                    budgetTotalHeader2.textContent = "Days ";
                    headerRow2.appendChild(budgetTotalHeader2);

                    let remainingBudgetHeader2 = document.createElement("th");
                    remainingBudgetHeader2.textContent = "People";
                    headerRow2.appendChild(remainingBudgetHeader2);

                    let budgetTotalHeaderD2 = document.createElement("th");
                    budgetTotalHeaderD2.textContent = "P.D.";
                    headerRow2.appendChild(budgetTotalHeaderD2);

                    header2.appendChild(headerRow2);
                    table2.appendChild(header2);
                    response[1].forEach((res2) => {
                        var row2 = document.createElement("tr");

                        // Labour Code cell
                        var labourCodeCell2 = document.createElement("td");
                        labourCodeCell2.textContent = res2.labourCode;
                        row2.appendChild(labourCodeCell2);

                        // Budget Total cell
                        var budgetTotalCell2 = document.createElement("td");
                        budgetTotalCell2.textContent = res2.days;
                        row2.appendChild(budgetTotalCell2);

                        // Remaining Budget cell
                        var remainingBudgetCell2 = document.createElement("td");
                        remainingBudgetCell2.textContent = res2.people;
                        row2.appendChild(remainingBudgetCell2);

                        var budgetTotalCellD2 = document.createElement("td");
                        budgetTotalCellD2.textContent = res2.days * res2.people;
                        row2.appendChild(budgetTotalCellD2);

                        tbody2.appendChild(row2);
                    });
                    table2.appendChild(tbody2);
                    var title2 = document.createElement("h3");
                    title2.innerHTML = "Responsible Engineer's Budget";
                    body.appendChild(title2);
                    body.appendChild(table2);
                }
                let modalObj = new bootstrap.Modal(modal);
                modalObj.show();

            });
        });
        div.appendChild(budgetDetailsButton);



        if (IsBottomLevel) {
            employeeButton = document.createElement("button");
            employeeButton.type = "button";
            employeeButton.innerHTML = "Assign Employee";
            div.appendChild(employeeButton);
            employeeButton.value = WorkPackageId;
            employeeButton.name = "name";
            employeeButton.className = "label bottomLevel btn btn-secondary";
            employeeButton.addEventListener('click', async function (info) {
                await fetch("/Project/GetWPEmployees", {
                        method: "POST",
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            workPackageId: employeeButton.value
                        }),
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((response) => {
                        var noneError = "No available employees.";
                        document.querySelector("#currentWP").value = info.srcElement.value;
                        response[1].forEach((c, index) => {
                                var remainingPeopleDisplay = document.createElement('div');
                                remainingPeopleDisplay.innerHTML = 'Budgeted Remaining: <span class="personCounter">' + c.people + '</span>';
                                remainingPeopleDisplay.style.columnSpan = "all";
                                document.querySelector("#AE" + c.labourCode).innerHTML = "";
                                document.querySelector("#AE" + c.labourCode).appendChild(remainingPeopleDisplay);
                                document.querySelector("#AE" + c.labourCode).append(noneError);
                        });
                        response[0].forEach((c, index) => {
                            var a = document.createElement("div");
                            a.classList.add(`emp_${index}`);
                            a.classList.add(`emp-name-avialable`);
                            a.innerHTML = `
                                <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault${index}">
                                <label class="form-check-label" for="flexCheckDefault${index}">${c.firstName} ${c.lastName} (${c.jobTitle})</label>
                                <span style="display:none;" >${c.id}</span>
                                `;
                            if(c.assigned){
                                a.querySelector(".form-check-input").checked = true;
                            }
                            a.querySelector(".form-check-input").addEventListener('change', function(){
                                var counter = this.parentNode.parentNode.querySelector(".personCounter");
                                if(this.checked){
                                    counter.innerHTML = parseInt(counter.innerHTML) - 1;
                                } else {
                                    counter.innerHTML = parseInt(counter.innerHTML) + 1;
                                }
                            });
                            var tabbedArea = document.querySelector("#AE" + c.labourCode)
                            if(tabbedArea.innerHTML.includes(noneError)){
                                tabbedArea.innerHTML = tabbedArea.innerHTML.replace(noneError, "");
                            }
                            tabbedArea.appendChild(a);
                        });
                        $("#employeeModal").modal("show");
                        if(response.length == 0){
                            document.querySelector("#assignEmployeesButton").style.display = "none";
                        } else {
                            document.querySelector("#assignEmployeesButton").style.display = "inline";
                        }
                    });
            });
            let respEngButton = document.createElement("button");
            respEngButton.type = "button";
            respEngButton.innerHTML = "Set Responsible Engineer";
            div.appendChild(respEngButton);
            respEngButton.value = WorkPackageId;
            respEngButton.name = "name";
            respEngButton.className = "label bottomLevel btn btn-secondary";
            respEngButton.addEventListener('click', async function getCandidateEmployees(info) {
                document.querySelector("#currentWP").value = info.srcElement.value;
                const candidateEmpEle = document.querySelector("#candidateEmployees");
                await fetch("/Project/GetCandidateEmployees", {
                        method: "POST",
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            workPackageId: respEngButton.value
                        }),
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((response) => {
                        $("#RespEngModal").modal("show");
                        candidateEmpEle.innerHTML = "";
                        response.forEach((c, index) => {
                            var a = document.createElement("div");
                            a.classList.add(`emp_${index}`);
                            a.classList.add(`emp-name-candidate`);
                            a.innerHTML = `
                                <input class="form-check-input" type="radio" value="" id="flexCheckDefault${index}" name="${WorkPackageId}">
                                <label class="form-check-label" for="flexCheckDefault${index}">${c.firstName} ${c.lastName}</label>
                                <span style="display:none;" >${c.id}</span>
                                `;
                            candidateEmpEle.appendChild(a);
                        });
                        if (response.length == 0) {
                            var a = document.createElement("p");
                            a.innerHTML = "No candidate employees.";
                            candidateEmpEle.appendChild(a);
                            document.querySelector("#assignRE").style.display = "none";
                        } else {
                            document.querySelector("#assignRE").style.display = "inline";
                        }
                    });
            }, false);
        }

        let table = document.createElement("table");

        let name = document.createElement("span");
        name.innerHTML = WorkPackageId;
        name.className = "label";

        let closed = document.createElement("span");
        closed.className = "label";
        closed.innerHTML = IsClosed;

        table.appendChild(createRow("Work Package ID: ", name, "Closed: ", closed, false));

        let re = document.createElement("span");
        re.id = WorkPackageId + "ResponsibleEngineer";
        re.className = "label";
        if (ResponsibleUserFN !== null) {
            re.innerHTML = ResponsibleUserFN + " " + ResponsibleUserLN;
        }
        table.appendChild(createRow("Responsible Engineer: ", re, null, null, !re.innerHTML));

        let tbudget = document.createElement("span");
        tbudget.innerHTML = "$"+totalBudget;
        let tremain = document.createElement("span");
        tremain.innerHTML = "$"+remainingBudget;
        tremain.className = "totalRemaining";
        var budgetRow;
        if (IsBottomLevel){
            budgetRow = createRow("Total Budget:", tbudget, "Remaining:", tremain, false);
        }
        else if(remainingBudget != 0){
            budgetRow = createRow("Total Budget:", tbudget, "Unallocated Budget:", tremain, false);
        } else {
            budgetRow = createRow("Total Budget:", tbudget, null, null, false);
        }
        budgetRow.className = "budgetRow";
        table.appendChild(budgetRow);

        div.append(table);

        if (IsBottomLevel) {
            await fetch("/Project/GetAssignedEmployees", {
                    method: "POST",
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        WorkPackageId: WorkPackageId
                    }),
                })
                .then((response) => {
                    return response.json();
                })
                .then(res => {
                    let list = document.createElement("div");
                    list.innerHTML = "Employees:";
                    list.className = "bottomLevel listLabel employeeList columnList" ;
                    div.appendChild(list);
                    var ul = document.createElement('ul');
                    ul.id = "UL" + WorkPackageId;
                    ul.className = "bottomLevel employeeList columnList";
                    let element = null;
                    if (res.length !== 0) {
                        // if any emp assigned to btmLvlwpkg, hide the split workpkg btn
                        div.querySelector("#SPLIT" + WorkPackageId).style.display = "none";
                        res.forEach(e => {
                            element = document.createElement("li");
                            element.innerHTML = e.firstName + " " + e.lastName;
                            ul.appendChild(element);
                        });
                    } else {
                        ul.innerHTML += "<p>No one is assigned</p>"
                    }
                    div.appendChild(ul);
                });
        }
        let parent = null;
        let subp = document.createElement("p");
        subp.innerHTML = "";
        div.appendChild(subp);
        if (ParentWorkPackageId !== null && ParentWorkPackageProjectId !== null && ParentWorkPackageId !== "" &&
            ParentWorkPackageProjectId !== "") {
            collapse.appendChild(div);
            item.appendChild(collapse);
            parent = document.querySelector("#WP" + ParentWorkPackageId);
            parent.appendChild(item);
        } else {
            collapse.appendChild(div);
            item.appendChild(collapse);
            parent = document.querySelector("#WorkPackages");
            parent.appendChild(item);
        }
    }

    function executeSplit(){
        const formData = new FormData(document.querySelector("#newWPForm"));
        fetch("/Project/Split", {
            method: "POST",
            body: formData,
        }).then(async c => {
            //if there is a field validation error show it again
            if(c.status == 400){
                var text = await c.text();
                var myModalEl = document.getElementById('splitModal');
                var modal = bootstrap.Modal.getInstance(myModalEl)
                modal.hide();
                document.querySelector("#modal-placeholder").innerHTML = text;
                document.querySelector("#parentWPID").value = WorkPackageId;
                myModalEl = document.getElementById('splitModal');
                modal = new bootstrap.Modal(myModalEl);
                modal.show();
                document.querySelector("#newWPForm").addEventListener('submit', submitForm);
                return;
            }
            return await c.json();
        }).then(c => {
            if(c == null){
                return;
            }
            let body = document.querySelector("#WP" + c.parentWorkPackageId);
            body.querySelectorAll(":scope > .bottomLevel").forEach((del) => {
                body.removeChild(del);
            });
            body.querySelectorAll(":scope > .employeeList").forEach((del) => {
                del.style.display = "none";
            });

            let budgetRow = body.querySelectorAll(":scope * .budgetRow > td");
            let tremain = document.createElement("span");
            tremain.innerHTML = "$" + (parseInt(budgetRow[1].innerHTML.replace(/\D/g, '')) - c.totalBudget);
            budgetRow[3].innerHTML = tremain.outerHTML;
            budgetRow[2].innerHTML = "Unallocated Budget:"

            addWP(c.workPackageId, c.title, c.responsibleUser.firstName, c.responsibleUser.lastName,
                c.isClosed, c.isBottomLevel, c.parentWorkPackageId, c.parentWorkPackageProjectId, c.totalBudget, c.totalRemaining);
            var myModalEl = document.getElementById('splitModal');
            var modal = bootstrap.Modal.getInstance(myModalEl)
            modal.hide();
        });
    }

    async function assignEmployeeToWp() {
        // creates an array of employees to add to this wp
        const empList = document.querySelectorAll(".emp-name-avialable");
        let employeesToBeAdded = Array.from(empList).map(e => {
            if (e.children[0].checked == true) {
                return {
                    WorkPackageProjectId: "@Model.wps[0].ProjectId",
                    WorkPackageId: document.querySelector("#currentWP").value,
                    UserId: e.children[2].innerHTML
                };
            } else {
                return {
                    WorkPackageProjectId: "@Model.wps[0].ProjectId",
                    WorkPackageId: document.querySelector("#currentWP").value
                };
            }
        });
        if(employeesToBeAdded.length == 0){
            employeesToBeAdded = [ {WorkPackageProjectId: "@Model.wps[0].ProjectId", WorkPackageId: document.querySelector("#currentWP").value} ];
        }
        await fetch("/Project/AssignEmployees", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(employeesToBeAdded),
        }).then(res => {
            return res.json();
        }).then(res => {
            let ul = document.querySelector("#UL" + document.querySelector("#currentWP").value);
            ul.innerHTML = "";
            res.forEach(e => {
                element = document.createElement("li");
                element.innerHTML = e.firstName + " " + e.lastName;
                ul.appendChild(element);
            });
            if(res.length !== 0){
                document.querySelector("#SPLIT" + document.querySelector("#currentWP").value).style.display = "none";
            } else {
                document.querySelector("#SPLIT" + document.querySelector("#currentWP").value).style.display = "inline";
                ul.innerHTML += "<p>No one is assigned</p>"
            }
            var myModalEl = document.getElementById('employeeModal');
            var modal = bootstrap.Modal.getInstance(myModalEl)
            modal.hide();
        });

    }

    async function assignResponsibleEngineer() {
        // select a candidate emp to add to this wp
        const empList = document.querySelectorAll(".emp-name-candidate");
        let responsibleEngineer = Array.from(empList).map(e => {
            if (e.children[0].checked == true) {
                return {
                    WorkPackageProjectId: "@Model.wps[0].ProjectId",
                    WorkPackageId: document.querySelector("#currentWP").value,
                    UserId: e.children[2].innerHTML
                };
            }
        }).find((item) => typeof item !== 'undefined');
        await fetch("/Project/AssignResponsibleEngineer", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(responsibleEngineer),
        }).then(res => {
            if (res.status == 200) {
                return res.json();
            }
        }).then(res => {
            if (res) {
                var id = "#" + document.querySelector("#currentWP").value + "ResponsibleEngineer";
                var reField = document.querySelector(id);
                reField.style = "";
                reField.innerHTML = res;
                reField.parentNode.parentNode.style.display = "table-row";
            } else {
                console.log("failed")
            }
            var myModalEl = document.getElementById('RespEngModal');
            var modal = bootstrap.Modal.getInstance(myModalEl)
            modal.hide();
        });
    }

    function setTotal(labourCode, rate, people, days, remainDays, remainPeople) {
        var element = document.querySelector("#" + labourCode);
        element.innerHTML = " $" + (people * days * rate);
        element = document.querySelector("#R" + labourCode);
        element.innerHTML = "&nbsp;&nbsp;Unallocated People: " + remainPeople + "  &nbsp;Days: " + remainDays;
    }

    //these 2 functions recursivly search through the wps to find matches in the search bar
    function search(input) {
        find(document.querySelector("#WorkPackages"), input);
    }
    //helper for search
    function find(head, input) {
        let items = head.querySelectorAll(':scope > .accordion-item');
        let matchFound = false;
        if (items.length == 0) return;
        items.forEach((wp) => {
            var title = wp.querySelector(':scope > .accordion-header').querySelector(
                ':scope > .accordion-button');
            const collapse = document.querySelector(title.getAttribute('data-bs-target'));
            if (find(wp.querySelector(':scope > .accordion-collapse').querySelector(':scope > .accordion-body'),
                    input)) {
                collapse.classList.toggle('show', true);
                title.classList.toggle('collapsed', false);
                matchFound = true;
            } else if (title.innerHTML.toLowerCase().includes(input.toLowerCase()) && input.length != 0) {
                collapse.classList.toggle('show', true);
                title.classList.toggle('collapsed', false);
                matchFound = true;
            } else {
                collapse.classList.toggle('show', false);
                title.classList.toggle('collapsed', true);
            }
        });
        return matchFound;
    }

    /**
    fetches employees of the project to search
    */
    fetch('/Project/GetAllEmployees')
            .then(response => response.json())
            .then(data => {
                const employeeMenu = document.getElementById('employeeMenu');
                const employeeSearchBox = document.getElementById("employeeSearchBox");
                data.forEach(employee => {
                    //need to get rid of PM from the list
                    const menuItem = document.createElement('li');
                    menuItem.classList.add('dropdown-item');
                    menuItem.textContent = `${employee.firstName} ${employee.lastName}`;
                    menuItem.id = employee.firstName + " " + employee.lastName;
                    menuItem.value = employee.employeeNumber;
                    menuItem.addEventListener('click', () => {
                        employeeSearchBox.value = `${employee.firstName} ${employee.lastName}`;
                    });
                    employeeMenu.appendChild(menuItem);
                });
        });
    function filterDropdown(event) {
        const input = event.target;
        const dropdown = input.nextElementSibling;
        const filter = input.value.toUpperCase();
        const items = dropdown.getElementsByTagName("li");

        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            const text = item.textContent || item.innerText;
            const match = text.toUpperCase().indexOf(filter) > -1;
            item.style.display = match ? "" : "none";
        }
    }
    function populateModal(){
        const employeeSearchBox = document.getElementById("employeeSearchBox");
        const innerModalBody = document.getElementById("innerModalBody");
        innerModalBody.textContent = `Are you sure you want to Assign ${employeeSearchBox.value}`;
    }
    function assignASM(){
        const employeeSearchBox = document.getElementById("employeeSearchBox");
        const employee = document.getElementById(employeeSearchBox.value);
        const asm = employee.value + "";
        fetch("/Project/AssignASM", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(asm),
        });
    }
    function isPrimaryPM(id){
        const hideAssignAsm = document.getElementById("assignASM");
        fetch("/Project/FindPM")
            .then(response => response.json()
            .then(data =>{
                if(id != data){
                    hideAssignAsm.style.display = "none";
                }
            }))
    }
</script>