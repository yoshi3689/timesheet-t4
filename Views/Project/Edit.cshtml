@model TimesheetApp.Models.WorkPackageViewModel
    @{
    ViewData["Title"] = "Manage Project";
    Boolean isAssign = true;
}

    <head>
        <title>@ViewData["Title"]</title>
    </head>
    <h1>@ViewData["Title"]</h1>


    <h2>Manage Work Packages</h2>
    <input type="text" id="WPSearch" placeholder="Search for work package..." oninput="search(this.value)"/>
    <div id="WorkPackages" class="accordian"></div>

    <div class="modal" tabindex="-1" role="dialog" id="splitModal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form id="newWPForm">
                    <div class="modal-header">
                        <h5 class="modal-title">Create Subpackage</h5>
                    </div>
                    <div class="modal-body">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <input type="hidden" asp-for="WorkPackage.ParentWorkPackageId" value="@Model.WorkPackage.ParentWorkPackageId" id="parentWPID"/>
                            <div class="form-group">
                                <label asp-for="WorkPackage.WorkPackageId" class="control-label"></label>
                                <input asp-for="WorkPackage.WorkPackageId" class="form-control" />
                                <span asp-validation-for="WorkPackage.WorkPackageId" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="WorkPackage.Title" class="control-label"></label>
                                <input asp-for="WorkPackage.Title" class="form-control" />
                                <span asp-validation-for="WorkPackage.Title" class="text-danger"></span>
                            </div>
                            <h1>Work Package Budget</h1>
                            <h3>Hours per Labour Grade</h3>
                    @for (int i = 0; i < Model.budgets!.Count; i++)
                    {
                        <div class="form-group">
                            <input type="hidden" asp-for="budgets![i].LabourCode" value="@Model.budgets![i].LabourCode" />
                            <span>@Model.budgets[i].LabourCode</span>
                            <div style="display:flex; flex-direction: row; overflow: hidden; white-space: nowrap;">
                                <input asp-for="budgets![i].BudgetAmount!" style="width: 20%;" class="form-control" onchange="setTotal('@Model.budgets![i].LabourCode', @Model.budgets![i].Rate, this.value, @Model.budgets![i].Remaining)"/> x $@Model.budgets![i]!.Rate/hour = <span id="@Model.budgets![i].LabourCode"> $0</span>
                                &nbsp;&nbsp;
                                <span id='@(String.Format("R{0}", Model.budgets![i].LabourCode))'>Remaining: $@Model.budgets![i].Remaining</span>
                            </div>
                            <span asp-validation-for="budgets![i].BudgetAmount" class="text-danger"></span>
                        </div>
                        <br/>
                    }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <input type="submit" value="Create" class="btn btn-primary" />
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="modal" tabindex="-1" role="dialog" id="employeeModal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
            @if (isAssign)
            {
                <div class="modal-header">
                <h5 class="modal-title">Assign Employee</h5>
            </div>
            <div class="modal-body">
                <div id="availableEmployees">
                    <h3>Available employees</h3>
                </div>
@* <input type="text" placeholder="Work Package Name..." id="newWorkPackageName"> *@
                <button type="button" class="btn btn-primary" onclick="assignEmployeeToWp()">Assign</button>
            </div>
            }
            else
            {
                    <div class="modal-header">
                <h5 class="modal-title">Remove Employee</h5>
            </div>
            <div class="modal-body">
                <div id="availableEmployees">
                    <h3>Available employees</h3>
                </div>
@* <input type="text" placeholder="Work Package Name..." id="newWorkPackageName"> *@
                <button type="button" class="btn btn-primary" onclick="assignEmployeeToWp()">Assign</button>
            </div>
            }
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                        onClick="window.location.reload();">Close</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal" tabindex="-1" role="dialog" id="RespEngModal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                    <div class="modal-header">
                    <h5 class="modal-title">Assign Responsible Engineer</h5>
                </div>
                <div class="modal-body">
                    <div id="candidateEmployees">
                        <h3>Candidates</h3>
                    </div>
                @* <input type="text" placeholder="Work Package Name..." id="newWorkPackageName"> *@
                    <button type="button" class="btn btn-primary" onclick="assignResponsibleEngineer()">Assign</button>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"
                        onClick="window.location.reload();">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentWorkPackage = "";
        let bottomLevelWorkPackage = "";


        // assigned emp list
        let ul;

        // assigned resp engineer
        let assignedRespEng;

    @foreach (var wp in Model.wps)
    {
        <text>
            var firstname = null;
            var lastname = null;
        </text>
        if (wp.ResponsibleUser != null)
        {
            <text>
                firstname = @wp.ResponsibleUser.FirstName;
                lastname = @wp.ResponsibleUser.LastName;
            </text>
        }
        <text>
            addWP("@wp.WorkPackageId", "@wp.Title", firstname, lastname, "@wp.IsClosed" === "True", "@wp.IsBottomLevel" === "True", "@wp.ParentWorkPackageId", @wp.ParentWorkPackageProjectId)
        </text>
    }

        function addWP(WorkPackageId, Title, ResponsibleUserFN, ResponsibleUserLN, IsClosed, IsBottomLevel, ParentWorkPackageId, ParentWorkPackageProjectId){
            let item = document.createElement("div");
            item.className = "accordion-item";

            let headerDiv = document.createElement("h2");
            headerDiv.className = "accordion-header";
            headerDiv.id = "dropdownID" + WorkPackageId;

            let header = document.createElement("button");
            header.className = "accordion-button collapsed";
            header.type = "button";
            header.setAttribute("data-bs-toggle", "collapse");
            header.setAttribute("data-bs-target", "#Panel" + WorkPackageId);
            header.setAttribute("aria-expanded", false);
            header.setAttribute("aria-controls", "Panel" + WorkPackageId);
            header.innerHTML = WorkPackageId + ": " + Title;

            headerDiv.appendChild(header);
            item.appendChild(headerDiv);

            let collapse = document.createElement("div");
            collapse.id = "Panel" + WorkPackageId;
            collapse.className = "accordion-collapse collapse";
            collapse.setAttribute("aria-labelledby", "dropdownID" + WorkPackageId);

            let div = document.createElement("div");
            div.className = "accordion-body";
            div.id = "WP" + WorkPackageId;
            let name = document.createElement("span");
            name.innerHTML = "Work Package Name: " + WorkPackageId;
            name.className = "label";
            div.appendChild(name);
            if(ResponsibleUserFN !== null) {
                    let re = document.createElement("span");
                    re.className = "label";
                    re.innerHTML =
                        "Responsible Engineer: " + ResponsibleUserFN + " " + ResponsibleUserLN;
                    div.appendChild(re);
                }
            let closed = document.createElement("span");
            closed.className = "label";
            closed.innerHTML = "Closed: " + IsClosed;
            div.appendChild(closed);

            let splitButton = document.createElement("button");
            splitButton.value = WorkPackageId;
            splitButton.name = "name";
            splitButton.className = "label";
            splitButton.addEventListener('click', async function callSplit(info) {
                currentWorkPackage = info.srcElement.value;
                document.querySelector("#parentWPID").value = WorkPackageId;
                $("#splitModal").modal("show");
            }, false);
            splitButton.type = "button";
            splitButton.innerHTML = "Create Subpackage";
            div.appendChild(splitButton);
    @* add two buttons: assign emp & assign resp eng *@
            if (IsBottomLevel) {
                    let employeeButton = document.createElement("button");
                    employeeButton.type = "button";
                    employeeButton.innerHTML = "Assign Employee";
                    div.appendChild(employeeButton);
                    employeeButton.value = WorkPackageId;
                    employeeButton.name = "name";
                    employeeButton.className = "label bottomLevel";
                    employeeButton.addEventListener('click', async function getAvailableEmployees(info) {
                    const avaialbleEmpEle = document.querySelector("#availableEmployees");
                    await fetch("/Project/GetAvailableEmployees", {
                            method: "POST",
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                workPackageId: employeeButton.value
                                }),
                        })
                        .then((response) => {
                            return response.json();
                        })
                        .then((response) => {
                            $("#employeeModal").modal("show");
                            response.forEach((c,index) => {
                                var a = document.createElement("div");
                                a.classList.add(`emp_${index}`);
                                a.classList.add(`emp-name-avialable`);
                                a.innerHTML = `
                                    <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault${index}">
                                    <label class="form-check-label" for="flexCheckDefault${index}">${c.firstName} ${c.lastName}</label>
                                    <span style="display:none;" >${c.id}</span>
                                    `;
                                avaialbleEmpEle.appendChild(a);
                            });
                            if (response.length == 0) {
                                var a = document.createElement("p");
                                a.innerHTML = "No avaialble employees";
                                avaialbleEmpEle.appendChild(a);
                            }
                        });

                }, false);
    @* add assign respEng button *@
                    let respEngButton = document.createElement("button");
                    respEngButton.type = "button";
                    respEngButton.innerHTML = "Add Responsible Engineer";
                    div.appendChild(respEngButton);
                    respEngButton.value = WorkPackageId;
                    respEngButton.name = "name";
                    respEngButton.className = "label bottomLevel";
                    respEngButton.addEventListener('click', async function getCandidateEmployees(info) {
    @* currentWorkPackage = info.srcElement.value; *@
                    const candidateEmpEle = document.querySelector("#candidateEmployees");
                    await fetch("/Project/GetCandidateEmployees", {
                            method: "POST",
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                workPackageId: respEngButton.value
                                }),
                        })
                        .then((response) => {
                            return response.json();
                        })
                        .then((response) => {
                            console.log(response)
                            $("#RespEngModal").modal("show");
                            response.forEach((c,index) => {
                                var a = document.createElement("div");
                                a.classList.add(`emp_${index}`);
                                a.classList.add(`emp-name-candidate`);
                                a.innerHTML = `
                                    <input class="form-check-input" type="radio" value="" id="flexCheckDefault${index}">
                                    <label class="form-check-label" for="flexCheckDefault${index}">${c.firstName} ${c.lastName}</label>
                                    <span style="display:none;" >${c.id}</span>
                                    `;
                                candidateEmpEle.appendChild(a);
                            });
                            if (response.length == 0) {
                                var a = document.createElement("p");
                                a.innerHTML = "No candidate employees.";
                                candidateEmpEle.appendChild(a);
                                respEngButton.disabled = true;
                            }
                        });

                }, false);

    @* updates list of assigned employees *@
            ul = document.createElement("ul");
            ul.className = "bottomLevel";
            ul.innerHTML = "<h3>Employees Assigned to this wp</h3>"
            assignedRespEng = document.createElement("div");
            assignedRespEng.className = "bottomLevel";
            assignedRespEng.innerHTML = "<h3>Responsible Engineer</h3>"

            fetch("/Project/GetAssignedEmployees", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                WorkPackageId: employeeButton.value
                }),
            })
            .then((response) => {
                return response.json();
            })
            .then(res => {
                if (res.length !== 0) {
                    // if any emp assigned to btmLvlwpkg, hide the split workpkg btn
                    $(`#${employeeButton.value} button`).first().hide();

                    res.forEach(e=> {
                    let element = document.createElement("li");
                    element.innerHTML = e.firstName +" " + e.lastName;
                    ul.appendChild(element);
                });
                } else {
                    ul.innerHTML += "<p>No one is asssigned</p>"
                }
                div.appendChild(ul);
            });

            fetch("/Project/GetResponsibleEngineer", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                WorkPackageId: employeeButton.value
                }),
            })
            .then((response) => {
                return response.json();
            })
            .then((res) => {
                console.log(res);
                let assignedRespEngText = res == null ? "<p>No RE assigned</p>" : `${res.result.responsibleUserId}`
                assignedRespEng.innerHTML += assignedRespEngText;
                div.appendChild(assignedRespEng);
            })
            }
            let parent = null;
            if (ParentWorkPackageId !== null && ParentWorkPackageProjectId !== null && ParentWorkPackageId !== "" && ParentWorkPackageProjectId !== "") {
                collapse.appendChild(div);
                item.appendChild(collapse);
                parent = document.querySelector("#WP" + ParentWorkPackageId);
                parent.appendChild(item);
            } else {
                collapse.appendChild(div);
                item.appendChild(collapse);
                parent = document.querySelector("#WorkPackages");
                parent.appendChild(item);
            }
        }

        //submit creation of sub work package
        document.querySelector("#newWPForm").addEventListener('submit', async function(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            await fetch("/Project/Split", {
                method: "POST",
                body: formData,
            }).then(c => {
                return c.json();
            }).then(c => {
                let body = document.querySelector("#WP" + c.parentWorkPackageId);
                body.querySelectorAll(":scope > .bottomLevel").forEach((del) => {
                    body.removeChild(del);
                });
                addWP(c.workPackageId, c.title, c.responsibleUser.firstName, c.responsibleUser.lastName, c.isClosed, c.isBottomLevel, c.parentWorkPackageId, c.parentWorkPackageProjectId);
                var myModalEl = document.getElementById('splitModal');
                var modal = bootstrap.Modal.getInstance(myModalEl)
                modal.hide();
            });
        });

        async function assignEmployeeToWp() {
            // creates an array of employees to add to this wp
            const empList = document.querySelectorAll(".emp-name-avialable");
            let employeesToBeAdded = Array.from(empList).map(e => {
                if (e.children[0].checked == true) {
                    return { WorkPackageProjectId: "@Model.wps[0].ProjectId", WorkPackageId : employeeButton.value ,UserId : e.children[2].innerHTML};
                }

            });
            await fetch("/Project/AssignEmployees", {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(employeesToBeAdded),
            }).then(res => {
                return res.json();
            }).then(res => {
                if (res.length !== 0) {
                    console.log(`${res.length} employee(s) added`);
    @*
        attempting to add a notification Pop-up
        const toast = document.createElement("div");
        toast.innerHTML = `
        <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
        <img src="..." class="rounded mr-2" alt="...">
        <strong class="mr-auto">Bootstrap</strong>
        <small class="text-muted">just now</small>
        <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
        <span aria-hidden="true">&times;</span>
        </button>
        </div>
        <div class="toast-body">
        See? Just like this.
        </div>
        </div>`;
        document.querySelector("#WorkPackages").appendChild(toast); *@
                } else {
                    console.log("no one added")
                }
            });

        }

        async function assignResponsibleEngineer() {
            // select a candidate emp to add to this wp
            const empList = document.querySelectorAll(".emp-name-candidate");
            let responsibleEngineer = Array.from(empList).map(e => {
                console.log(e.children[0]);
                console.log(e.children[0].checked);
                if (e.children[0].checked == true) {
                    return { WorkPackageProjectId: "@Model.wps[0].ProjectId", WorkPackageId : employeeButton.value ,UserId : e.children[2].innerHTML};
                }
            })[0];
            await fetch("/Project/AssignResponsibleEngineer", {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(responsibleEngineer),
            }).then(res => {
                return res.json();
            }).then(res => {
                if (res.length !== 0) {
                    console.log(`${res.length} employee(s) added`);
                } else {
                    console.log("no one added")
                }
            });

        }

        function setTotal(labourCode, rate, total, remain){
            var element = document.querySelector("#" + labourCode);
            element.innerHTML = " $" + (total * rate);
            element = document.querySelector("#R" + labourCode);
            element.innerHTML = "Remaining: $" + (remain - (total * rate));
        }

        //these 2 functions recursivly search through the wps to find matches in the search bar
        function search(input){
            find(document.querySelector("#WorkPackages"), input);
        }
        //helper for search
        function find(head, input){
            let items = head.querySelectorAll(':scope > .accordion-item');
            let matchFound = false;
            if(items.length == 0) return;
            items.forEach((wp) => {
                var title = wp.querySelector(':scope > .accordion-header').querySelector(':scope > .accordion-button');
                const collapse = document.querySelector(title.getAttribute('data-bs-target'));
                if(find(wp.querySelector(':scope > .accordion-collapse').querySelector(':scope > .accordion-body'), input)){
                    collapse.classList.toggle('show', true);
                    title.classList.toggle('collapsed', false);
                    matchFound = true;
                } else if(title.innerHTML.includes(input) && input.length != 0) {
                    collapse.classList.toggle('show', true);
                    title.classList.toggle('collapsed', false);
                    matchFound = true;
                } else {
                    collapse.classList.toggle('show', false);
                    title.classList.toggle('collapsed', true);
                }
            });
            return matchFound;
        }
    </script>