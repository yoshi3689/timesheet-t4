@model TimesheetApp.Models.WorkPackageViewModel
@{
ViewData["Title"] = "Manage Project";
}

<head>
    <title>@ViewData["Title"]</title>
</head>
<h1>@ViewData["Title"]</h1>


<h2>Manage Work Packages</h2>
<input type="text" id="WPSearch" placeholder="Search for work package..." oninput="search(this.value)" />
<div id="WorkPackages" class="accordian"></div>
<input type="hidden" id="currentWP" />
<div id="modal-placeholder"></div>

<div class="btn-group">
    <input type="text" class="dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"
        onkeyup="filterDropdown(event)" id=employeeSearchBox placeholder="Search Employee..."/>
    <ul class="dropdown-menu" aria-labelledby="employeeDropdown" id="employeeMenu">
    </ul>
    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" onclick="populateModal()">
    Confirm
    </button>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Assign Assistant Project Manager</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p id="innerModalBody"></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="assignASM()" data-bs-dismiss="modal">Save changes</button>
      </div>
    </div>
  </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="employeeModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Employee</h5>
            </div>
            <div class="modal-body">
                <div id="availableEmployees">
                    <h3>Available employees</h3>
                </div>
                <button type="button" class="btn btn-primary" onclick="assignEmployeeToWp()">Update</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="budgetModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Budget Details</h5>
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="RespEngModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Assign Responsible Engineer</h5>
            </div>
            <div class="modal-body">
                <div id="candidateEmployees">
                    <h3>Candidates</h3>
                </div>
                @* <input type="text" placeholder="Work Package Name..." id="newWorkPackageName"> *@
                <button type="button" class="btn btn-primary" onclick="assignResponsibleEngineer()">Assign</button>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentWorkPackage = "";
    let bottomLevelWorkPackage = "";

    // assigned emp list
    let ul;

    // assigned resp engineer
    let assignedRespEng;

    @foreach(var wp in Model.wps) {
        <text >
            var firstname = null;
        var lastname = null;
        </text>
        @if(wp.ResponsibleUser != null) {
                <text >
                    firstname = "@wp.ResponsibleUser.FirstName";
                    lastname = "@wp.ResponsibleUser.LastName";
                </text>
            }
            <text>
            (async function () {
                await addWP("@wp.WorkPackageId", "@wp.Title", firstname, lastname, "@wp.IsClosed" ==="True", "@wp.IsBottomLevel" === "True", "@wp.ParentWorkPackageId", @wp.ParentWorkPackageProjectId, @wp.TotalBudget, @wp.TotalRemaining);
            })();
            </text>
    }

    function createRow(caption, object, caption2, object2, hidden) {
        let row = document.createElement('tr');
        let data1 = document.createElement('td');
        data1.className = "listLabel";
        let data2 = document.createElement('td');
        data2.className = "listLabel";
        let data3 = document.createElement('td');
        data3.className = "listLabel";
        let data4 = document.createElement('td');
        data4.className = "listLabel";
        let captionObj = document.createElement('span');
        let captionObj2 = document.createElement('span');
        captionObj.innerHTML = caption;
        data1.appendChild(captionObj);
        data2.appendChild(object);
        data2.style = "width: 35%; text-align: left;"
        row.appendChild(data1);
        row.appendChild(data2);

        if (caption2 !== null) {
            captionObj2.innerHTML = caption2;
            data3.appendChild(captionObj2);
            data4.appendChild(object2);
        }
        row.appendChild(data3);
        row.appendChild(data4);
        if (hidden) {
            row.style = "display: none;";
        }
        return row;
    }

    async function addWP(WorkPackageId, Title, ResponsibleUserFN, ResponsibleUserLN, IsClosed, IsBottomLevel,
        ParentWorkPackageId, ParentWorkPackageProjectId, totalBudget, remainingBudget) {
        let employeeButton = null;
        let item = document.createElement("div");
        item.className = "accordion-item";

        let headerDiv = document.createElement("h2");
        headerDiv.className = "accordion-header";
        headerDiv.id = "dropdownID" + WorkPackageId;

        let header = document.createElement("button");
        header.className = "accordion-button collapsed";
        header.type = "button";
        header.setAttribute("data-bs-toggle", "collapse");
        header.setAttribute("data-bs-target", "#Panel" + WorkPackageId);
        header.setAttribute("aria-expanded", false);
        header.setAttribute("aria-controls", "Panel" + WorkPackageId);
        header.innerHTML = WorkPackageId + ": " + Title;

        headerDiv.appendChild(header);
        item.appendChild(headerDiv);

        let collapse = document.createElement("div");
        collapse.id = "Panel" + WorkPackageId;
        collapse.className = "accordion-collapse collapse";
        collapse.setAttribute("aria-labelledby", "dropdownID" + WorkPackageId);

        let div = document.createElement("div");
        div.className = "accordion-body";
        div.id = "WP" + WorkPackageId;

        let splitButton = document.createElement("button");
        splitButton.value = WorkPackageId;
        splitButton.name = "name";
        splitButton.className = "label";

        splitButton.addEventListener('click', async function callSplit(info) {
            currentWorkPackage = info.srcElement.value;
            await fetch('/Project/ShowSplit')
            .then(function(data){
                return data.text();
            }).then(function(data){
                document.querySelector("#modal-placeholder").innerHTML = data;
                document.querySelector("#parentWPID").value = WorkPackageId;
                var myModalEl = document.getElementById('splitModal');
                var modal = new bootstrap.Modal(myModalEl);
                modal.show();
                //submit creation of sub work package
                document.querySelector("#newWPForm").addEventListener('submit', async function submitForm (event) {
                    event.preventDefault();
                    const formData = new FormData(document.querySelector("#newWPForm"));
                    await fetch("/Project/Split", {
                        method: "POST",
                        body: formData,
                    }).then(async c => {
                        if(c.status == 400){
                            var text = await c.text();
                            var myModalEl = document.getElementById('splitModal');
                            var modal = bootstrap.Modal.getInstance(myModalEl)
                            modal.hide();
                            document.querySelector("#modal-placeholder").innerHTML = text;
                            document.querySelector("#parentWPID").value = WorkPackageId;
                            myModalEl = document.getElementById('splitModal');
                            modal = new bootstrap.Modal(myModalEl);
                            modal.show();
                            document.querySelector("#newWPForm").addEventListener('submit', submitForm);
                            return;
                        }
                        return await c.json();
                    }).then(c => {
                        if(c == null){
                            return;
                        }
                        let body = document.querySelector("#WP" + c.parentWorkPackageId);
                        body.querySelectorAll(":scope > .bottomLevel").forEach((del) => {
                            body.removeChild(del);
                        });
                        body.querySelectorAll(":scope > .employeeList").forEach((del) => {
                            del.style.display = "none";
                        });

                        let budgetRow = body.querySelectorAll(":scope * .budgetRow > td");
                        let tremain = document.createElement("span");
                        tremain.innerHTML = "$" + (parseInt(budgetRow[1].innerHTML.replace(/\D/g, '')) - c.totalBudget);
                        budgetRow[2].innerHTML = "Remaining Budget:";
                        budgetRow[3].innerHTML = tremain.outerHTML;

                        addWP(c.workPackageId, c.title, c.responsibleUser.firstName, c.responsibleUser.lastName,
                            c.isClosed, c.isBottomLevel, c.parentWorkPackageId, c.parentWorkPackageProjectId, c.totalBudget, c.remainingBudget);
                        var myModalEl = document.getElementById('splitModal');
                        var modal = bootstrap.Modal.getInstance(myModalEl)
                        modal.hide();
                    });
                });
            });
        }, false);
        splitButton.type = "button";
        splitButton.innerHTML = "Create Subpackage";
        splitButton.className = "label btn btn-primary";
        splitButton.id = "SPLIT" + WorkPackageId;
        div.appendChild(splitButton);

        let budgetDetailsButton = document.createElement("button");
        budgetDetailsButton.value = WorkPackageId;
        budgetDetailsButton.name = "name";
        budgetDetailsButton.className = "label";
        budgetDetailsButton.innerHTML = "Budget Details";
        budgetDetailsButton.type = "button";
        budgetDetailsButton.className = "label btn btn-info";
        budgetDetailsButton.addEventListener('click', async function callSplit(info) {
            await fetch("/Project/BudgetDetails", {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    workPackageId: budgetDetailsButton.value
                }),
            })
            .then((response) => {
                return response.json();
            })
            .then((response) => {
                let modal = document.getElementById('budgetModal');
                let body = modal.querySelector(":scope * .modal-body");
                body.innerHTML = "";

                let table = document.createElement("table");
                table.className = "table table-striped";

                // Create the table header
                let header = document.createElement("thead");
                let headerRow = document.createElement("tr");
                let labourCodeHeader = document.createElement("th");
                labourCodeHeader.textContent = "Labour Code";
                headerRow.appendChild(labourCodeHeader);

                let budgetTotalHeader = document.createElement("th");
                budgetTotalHeader.textContent = "Total (Hours)";
                headerRow.appendChild(budgetTotalHeader);

                let remainingBudgetHeader = document.createElement("th");
                remainingBudgetHeader.textContent = "Remaining (Hours)";
                headerRow.appendChild(remainingBudgetHeader);

                let budgetTotalHeaderD = document.createElement("th");
                budgetTotalHeaderD.textContent = "Total";
                headerRow.appendChild(budgetTotalHeaderD);

                let remainingBudgetHeaderD = document.createElement("th");
                remainingBudgetHeaderD.textContent = "Remaining";
                headerRow.appendChild(remainingBudgetHeaderD);

                header.appendChild(headerRow);
                table.appendChild(header);

                // Create the table body
                let tbody = document.createElement("tbody");

                if(response.length !== 0){
                    response.forEach((res) => {
                        let row = document.createElement("tr");

                        // Labour Code cell
                        let labourCodeCell = document.createElement("td");
                        labourCodeCell.textContent = res.labourCode;
                        row.appendChild(labourCodeCell);

                        // Budget Total cell
                        let budgetTotalCell = document.createElement("td");
                        budgetTotalCell.textContent = res.budgetAmount;
                        row.appendChild(budgetTotalCell);

                        // Remaining Budget cell
                        let remainingBudgetCell = document.createElement("td");
                        remainingBudgetCell.textContent = res.remaining;
                        row.appendChild(remainingBudgetCell);

                        let budgetTotalCellD = document.createElement("td");
                        budgetTotalCellD.textContent = "$" + (res.budgetAmount * res.rate);
                        row.appendChild(budgetTotalCellD);

                        // Remaining Budget cell
                        let remainingBudgetCellD = document.createElement("td");
                        remainingBudgetCellD.textContent = "$" + (res.remaining * res.rate);
                        row.appendChild(remainingBudgetCellD);

                        tbody.appendChild(row);
                    });
                }

                table.appendChild(tbody);
                body.appendChild(table);
                let modalObj = new bootstrap.Modal(modal);
                modalObj.show();

            });
        });
        div.appendChild(budgetDetailsButton);



        if (IsBottomLevel) {
            employeeButton = document.createElement("button");
            employeeButton.type = "button";
            employeeButton.innerHTML = "Assign Employee";
            div.appendChild(employeeButton);
            employeeButton.value = WorkPackageId;
            employeeButton.name = "name";
            employeeButton.className = "label bottomLevel btn btn-secondary";
            employeeButton.addEventListener('click', async function (info) {
                const avaialbleEmpEle = document.querySelector("#availableEmployees");
                await fetch("/Project/GetWPEmployees", {
                        method: "POST",
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            workPackageId: employeeButton.value
                        }),
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((response) => {
                        $("#employeeModal").modal("show");
                        document.querySelector("#currentWP").value = info.srcElement.value;
                        avaialbleEmpEle.innerHTML = "";
                        response.forEach((c, index) => {
                            var a = document.createElement("div");
                            a.classList.add(`emp_${index}`);
                            a.classList.add(`emp-name-avialable`);
                            a.innerHTML = `
                                <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault${index}">
                                <label class="form-check-label" for="flexCheckDefault${index}">${c.firstName} ${c.lastName} (${c.jobTitle})</label>
                                <span style="display:none;" >${c.id}</span>
                                `;
                            if(c.assigned){
                                a.querySelector(".form-check-input").checked = true;
                            }
                            avaialbleEmpEle.appendChild(a);
                        });
                        var a = document.createElement("p");
                        a.innerHTML = "No avaialble employees";
                        avaialbleEmpEle.appendChild(a);
                    });
            }, false);
            let respEngButton = document.createElement("button");
            respEngButton.type = "button";
            respEngButton.innerHTML = "Set Responsible Engineer";
            div.appendChild(respEngButton);
            respEngButton.value = WorkPackageId;
            respEngButton.name = "name";
            respEngButton.className = "label bottomLevel btn btn-secondary";
            respEngButton.addEventListener('click', async function getCandidateEmployees(info) {
                document.querySelector("#currentWP").value = info.srcElement.value;
                const candidateEmpEle = document.querySelector("#candidateEmployees");
                await fetch("/Project/GetCandidateEmployees", {
                        method: "POST",
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            workPackageId: respEngButton.value
                        }),
                    })
                    .then((response) => {
                        return response.json();
                    })
                    .then((response) => {
                        $("#RespEngModal").modal("show");
                        candidateEmpEle.innerHTML = "";
                        response.forEach((c, index) => {
                            var a = document.createElement("div");
                            a.classList.add(`emp_${index}`);
                            a.classList.add(`emp-name-candidate`);
                            a.innerHTML = `
                                <input class="form-check-input" type="radio" value="" id="flexCheckDefault${index}" name="${WorkPackageId}">
                                <label class="form-check-label" for="flexCheckDefault${index}">${c.firstName} ${c.lastName}</label>
                                <span style="display:none;" >${c.id}</span>
                                `;
                            candidateEmpEle.appendChild(a);
                        });
                        if (response.length == 0) {
                            var a = document.createElement("p");
                            a.innerHTML = "No candidate employees.";
                            candidateEmpEle.appendChild(a);
                        }
                    });
            }, false);
        }

        let table = document.createElement("table");

        let name = document.createElement("span");
        name.innerHTML = WorkPackageId;
        name.className = "label";

        let closed = document.createElement("span");
        closed.className = "label";
        closed.innerHTML = IsClosed;

        table.appendChild(createRow("Work Package ID: ", name, "Closed: ", closed, false));

        let re = document.createElement("span");
        re.id = WorkPackageId + "ResponsibleEngineer";
        re.className = "label";
        if (ResponsibleUserFN !== null) {
            re.innerHTML = ResponsibleUserFN + " " + ResponsibleUserLN;
        }
        table.appendChild(createRow("Responsible Engineer: ", re, null, null, !re.innerHTML));

        let tbudget = document.createElement("span");
        tbudget.innerHTML = "$"+totalBudget;
        let tremain = document.createElement("span");
        tremain.innerHTML = "$"+remainingBudget;
        tremain.className = "totalRemaining";
        var budgetRow;
        if(IsBottomLevel){
            //this shoudl have total spent so far in the second slot (eventually)
            budgetRow = createRow("Total Budget:", tbudget, null, null, false);
        } else if (remainingBudget != 0){
            budgetRow = createRow("Total Budget:", tbudget, "Remaining Budget:", tremain, false);
        } else {
            budgetRow = createRow("Total Budget:", tbudget, null, null, false);
        }
        budgetRow.className = "budgetRow";
        table.appendChild(budgetRow);

        div.append(table);

        if (IsBottomLevel) {
            await fetch("/Project/GetAssignedEmployees", {
                    method: "POST",
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        WorkPackageId: WorkPackageId
                    }),
                })
                .then((response) => {
                    return response.json();
                })
                .then(res => {
                    let list = document.createElement("div");
                    list.innerHTML = "Employees:";
                    list.className = "bottomLevel listLabel employeeList" ;
                    div.appendChild(list);
                    var ul = document.createElement('ul');
                    ul.id = WorkPackageId + "UL";
                    ul.className = "bottomLevel employeeList";
                    let element = null;
                    if (res.length !== 0) {
                        // if any emp assigned to btmLvlwpkg, hide the split workpkg btn
                        div.querySelector("#SPLIT" + WorkPackageId).style.display = "none";
                        res.forEach(e => {
                            element = document.createElement("li");
                            element.innerHTML = e.firstName + " " + e.lastName;
                            ul.appendChild(element);
                        });
                    } else {
                        ul.innerHTML += "<p>No one is assigned</p>"
                    }
                    div.appendChild(ul);
                });
        }
        let parent = null;
        let subp = document.createElement("p");
        subp.innerHTML = "";
        div.appendChild(subp);
        if (ParentWorkPackageId !== null && ParentWorkPackageProjectId !== null && ParentWorkPackageId !== "" &&
            ParentWorkPackageProjectId !== "") {
            collapse.appendChild(div);
            item.appendChild(collapse);
            parent = document.querySelector("#WP" + ParentWorkPackageId);
            parent.appendChild(item);
        } else {
            collapse.appendChild(div);
            item.appendChild(collapse);
            parent = document.querySelector("#WorkPackages");
            parent.appendChild(item);
        }
    }

    async function assignEmployeeToWp() {
        // creates an array of employees to add to this wp
        const empList = document.querySelectorAll(".emp-name-avialable");
        let employeesToBeAdded = Array.from(empList).map(e => {
            if (e.children[0].checked == true) {
                return {
                    WorkPackageProjectId: "@Model.wps[0].ProjectId",
                    WorkPackageId: document.querySelector("#currentWP").value,
                    UserId: e.children[2].innerHTML
                };
            } else {
                return {
                    WorkPackageProjectId: "@Model.wps[0].ProjectId",
                    WorkPackageId: document.querySelector("#currentWP").value
                };
            }
        });
        await fetch("/Project/AssignEmployees", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(employeesToBeAdded),
        }).then(res => {
            return res.json();
        }).then(res => {
            let ul = document.querySelector("#" + document.querySelector("#currentWP").value + "UL");
            ul.innerHTML = "";
            res.forEach(e => {
                element = document.createElement("li");
                element.innerHTML = e.firstName + " " + e.lastName;
                ul.appendChild(element);
            });
            if(res.length !== 0){
                document.querySelector("#SPLIT" + document.querySelector("#currentWP").value).style.display = "none";
            } else {
                document.querySelector("#SPLIT" + document.querySelector("#currentWP").value).style.display = "inline";
                ul.innerHTML += "<p>No one is assigned</p>"
            }

            var myModalEl = document.getElementById('employeeModal');
            var modal = bootstrap.Modal.getInstance(myModalEl)
            modal.hide();
        });

    }

    async function assignResponsibleEngineer() {
        // select a candidate emp to add to this wp
        const empList = document.querySelectorAll(".emp-name-candidate");
        let responsibleEngineer = Array.from(empList).map(e => {
            if (e.children[0].checked == true) {
                return {
                    WorkPackageProjectId: "@Model.wps[0].ProjectId",
                    WorkPackageId: document.querySelector("#currentWP").value,
                    UserId: e.children[2].innerHTML
                };
            }
        }).find((item) => typeof item !== 'undefined');
        await fetch("/Project/AssignResponsibleEngineer", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(responsibleEngineer),
        }).then(res => {
            if (res.status == 200) {
                return res.json();
            }
        }).then(res => {
            if (res) {
                var id = "#" + document.querySelector("#currentWP").value + "ResponsibleEngineer";
                var reField = document.querySelector(id);
                reField.style = "";
                reField.innerHTML = res;
                reField.parentNode.parentNode.style.display = "table-row";
            } else {
                console.log("failed")
            }
        });
    }

    function setTotal(labourCode, rate, total, remain) {
        var element = document.querySelector("#" + labourCode);
        element.innerHTML = " $" + (total * rate);
        element = document.querySelector("#R" + labourCode);
        element.innerHTML = "Remaining: $" + ((remain * rate) - (total * rate)) + " (" + (remain - total) + " hours )";
    }

    //these 2 functions recursivly search through the wps to find matches in the search bar
    function search(input) {
        find(document.querySelector("#WorkPackages"), input);
    }
    //helper for search
    function find(head, input) {
        let items = head.querySelectorAll(':scope > .accordion-item');
        let matchFound = false;
        if (items.length == 0) return;
        items.forEach((wp) => {
            var title = wp.querySelector(':scope > .accordion-header').querySelector(
                ':scope > .accordion-button');
            const collapse = document.querySelector(title.getAttribute('data-bs-target'));
            if (find(wp.querySelector(':scope > .accordion-collapse').querySelector(':scope > .accordion-body'),
                    input)) {
                collapse.classList.toggle('show', true);
                title.classList.toggle('collapsed', false);
                matchFound = true;
            } else if (title.innerHTML.toLowerCase().includes(input.toLowerCase()) && input.length != 0) {
                collapse.classList.toggle('show', true);
                title.classList.toggle('collapsed', false);
                matchFound = true;
            } else {
                collapse.classList.toggle('show', false);
                title.classList.toggle('collapsed', true);
            }
        });
        return matchFound;
    }

    /**
    fetches employees of the project to search
    */
    fetch('/Project/GetAllEmployees')
            .then(response => response.json())
            .then(data => {
                const employeeMenu = document.getElementById('employeeMenu');
                const employeeSearchBox = document.getElementById("employeeSearchBox");
                data.forEach(employee => {
                    //need to get rid of PM from the list
                    const menuItem = document.createElement('li');
                    menuItem.classList.add('dropdown-item');
                    menuItem.textContent = `${employee.firstName} ${employee.lastName}`;
                    menuItem.id = employee.firstName + " " + employee.lastName;
                    menuItem.value = employee.employeeNumber;
                    menuItem.addEventListener('click', () => {
                        employeeSearchBox.value = `${employee.firstName} ${employee.lastName}`;
                    });
                    employeeMenu.appendChild(menuItem);
                });
        })
        .catch(error => {
            // Handle any errors here
            console.error(error);
        });
    function filterDropdown(event) {
        const input = event.target;
        const dropdown = input.nextElementSibling;
        const filter = input.value.toUpperCase();
        const items = dropdown.getElementsByTagName("li");

        for (let i = 0; i < items.length; i++) {
            const item = items[i];
            const text = item.textContent || item.innerText;
            const match = text.toUpperCase().indexOf(filter) > -1;
            item.style.display = match ? "" : "none";
        }
    }
    function populateModal(){
        const employeeSearchBox = document.getElementById("employeeSearchBox");
        const innerModalBody = document.getElementById("innerModalBody");
        innerModalBody.textContent = `Are you sure you want to Assign ${employeeSearchBox.value}`;
    }
    function assignASM(){
        const employeeSearchBox = document.getElementById("employeeSearchBox");
        const employee = document.getElementById(employeeSearchBox.value);
        const asm = employee.value + "";
        //change this condition later
        fetch("/Project/AssignASM", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(asm),
        });
    }
</script>